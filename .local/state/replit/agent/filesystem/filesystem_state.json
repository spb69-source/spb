{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack banking application called \"Secure Professional Bank\" built with React and Express. The application provides a comprehensive banking platform with separate user and admin interfaces, featuring account management, messaging, transactions, and loan applications. Users can register for accounts that require admin approval, and once approved, they can access banking services including account creation, transaction history, and communication with bank administrators.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built using React with TypeScript and follows a component-based architecture. The application uses Wouter for client-side routing and React Query for server state management. The UI is built with shadcn/ui components and styled using Tailwind CSS with a design system that supports both light and dark themes.\n\n**Key Frontend Decisions:**\n- **React with TypeScript**: Provides type safety and better developer experience\n- **Wouter for routing**: Lightweight alternative to React Router for simple routing needs\n- **React Query**: Handles server state management, caching, and data synchronization\n- **shadcn/ui**: Pre-built accessible components that maintain consistency across the application\n- **Tailwind CSS**: Utility-first CSS framework for rapid UI development\n\n## Backend Architecture\nThe backend follows a REST API architecture built with Express.js and TypeScript. It implements session-based authentication using PostgreSQL for session storage and provides real-time communication through WebSockets.\n\n**Key Backend Decisions:**\n- **Express.js**: Mature and flexible Node.js framework for API development\n- **Session-based authentication**: Uses express-session with PostgreSQL storage for secure user sessions\n- **Modular route structure**: Separates route definitions from the main server file for better organization\n- **WebSocket integration**: Enables real-time messaging between users and administrators\n\n## Data Storage\nThe application uses PostgreSQL as the primary database with Drizzle ORM for type-safe database operations. The database schema includes tables for users, accounts, transactions, messages, and loan applications.\n\n**Database Design Decisions:**\n- **PostgreSQL**: Robust relational database suitable for financial applications\n- **Drizzle ORM**: Provides type safety and excellent TypeScript integration\n- **Neon Database**: Cloud PostgreSQL provider for simplified deployment and scaling\n- **Session storage**: Dedicated sessions table for secure session management\n\n## Authentication and Authorization\nThe system implements role-based access control with separate authentication flows for regular users and administrators. Users must be approved by administrators before accessing banking features.\n\n**Security Features:**\n- **Password hashing**: Uses bcrypt for secure password storage\n- **Role-based access**: Separate user and admin roles with different permissions\n- **Account approval workflow**: New users require admin approval before account activation\n- **Session management**: Secure session handling with configurable timeouts\n\n## Component Structure\nThe frontend is organized into reusable components with clear separation of concerns:\n- **Page components**: Handle routing and high-level application state\n- **UI components**: Reusable interface elements from shadcn/ui\n- **Custom components**: Application-specific components like sidebars and chat interfaces\n- **Hooks**: Custom React hooks for authentication, WebSocket connections, and other shared logic\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Cloud PostgreSQL hosting service\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## Frontend Libraries\n- **React Query (@tanstack/react-query)**: Server state management and caching\n- **React Hook Form**: Form handling and validation\n- **Zod**: Runtime type validation and schema definitions\n- **date-fns**: Date manipulation and formatting utilities\n- **Wouter**: Lightweight client-side routing\n\n## UI Framework\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Unstyled, accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Static type checking for JavaScript\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database migration and schema management tools","size_bytes":4637},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2833},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { MongoClient, Db } from \"mongodb\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst mongoUri = \"mongodb+srv://securebank69_db_user:DGwUstsGEMZJPqMs@spb.qjigdqa.mongodb.net/secure-pb?retryWrites=true&w=majority&appName=SPB\";\n\nexport const mongoClient = new MongoClient(mongoUri);\nlet isConnected = false;\nlet db: Db;\n\nexport async function connectDB(): Promise<Db> {\n  if (!isConnected) {\n    await mongoClient.connect();\n    db = mongoClient.db(\"secure-pb\");\n    isConnected = true;\n    console.log(\"Connected to MongoDB successfully\");\n  }\n  return db;\n}","size_bytes":568},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertMessageSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport MemoryStore from \"memorystore\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration (Memory Store)\n  const MemoryStoreSession = MemoryStore(session);\n  app.use(session({\n    store: new MemoryStoreSession({\n      checkPeriod: 86400000, // prune expired entries every 24h\n    }),\n    secret: process.env.SESSION_SECRET || \"secure-professional-bank-secret\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: false, // Set to true in production with HTTPS\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    next();\n  };\n\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.session.userId || !req.session.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    next();\n  };\n\n  // User registration\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const user = await storage.createUser(validatedData);\n      \n      // Create session for the new user\n      req.session.userId = user.id;\n      req.session.isAdmin = false;\n      req.session.isApproved = user.isApproved ?? false;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName,\n          isApproved: user.isApproved \n        } \n      });\n    } catch (error) {\n      res.status(400).json({ message: \"Registration failed\", error: error instanceof Error ? error.message : \"Unknown error\" });\n    }\n  });\n\n  // User login\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || user.isAdmin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.isAdmin = false;\n      req.session.isApproved = user.isApproved ?? false;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName,\n          isApproved: user.isApproved \n        } \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Admin login\n  app.post(\"/api/auth/admin-login\", async (req, res) => {\n    try {\n      const { email, username, password } = req.body;\n\n      // Check hardcoded admin credentials\n      if (email === \"spb@admin.io\" && username === \"SPB Admin\" && password === \"SpbAdminLogin@01,.\") {\n        const admin = await storage.getAdminByCredentials(email, username);\n        if (admin) {\n          req.session.userId = admin.id;\n          req.session.isAdmin = true;\n          req.session.isApproved = true;\n\n          res.json({ \n            user: { \n              id: admin.id, \n              email: admin.email, \n              firstName: admin.firstName, \n              lastName: admin.lastName,\n              isAdmin: true \n            } \n          });\n          return;\n        }\n      }\n\n      res.status(401).json({ message: \"Invalid admin credentials\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Admin login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ \n        id: user.id, \n        email: user.email, \n        firstName: user.firstName, \n        lastName: user.lastName,\n        isApproved: user.isApproved,\n        isAdmin: user.isAdmin \n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Logout\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Get all users (admin only)\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        isApproved: user.isApproved,\n        createdAt: user.createdAt,\n        phone: user.phone,\n        streetAddress: user.streetAddress,\n        city: user.city,\n        state: user.state,\n        zipCode: user.zipCode,\n        ssn: `***-**-${user.ssn.slice(-4)}`, // Mask SSN\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get pending users (admin only)\n  app.get(\"/api/admin/pending-users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getPendingUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        createdAt: user.createdAt,\n        phone: user.phone,\n        streetAddress: user.streetAddress,\n        city: user.city,\n        state: user.state,\n        zipCode: user.zipCode,\n        ssn: `***-**-${user.ssn.slice(-4)}`,\n      })));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch pending users\" });\n    }\n  });\n\n  // Approve user (admin only)\n  app.post(\"/api/admin/approve-user/:id\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.updateUserApproval(req.params.id, true);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Create default checking account for approved user\n      await storage.createAccount({\n        userId: user.id,\n        accountNumber: `SPB${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`,\n        accountType: \"checking\",\n        balance: \"0.00\",\n        isActive: true,\n      });\n\n      res.json({ message: \"User approved successfully\", user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to approve user\" });\n    }\n  });\n\n  // Reject user (admin only)\n  app.post(\"/api/admin/reject-user/:id\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.updateUserApproval(req.params.id, false);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ message: \"User rejected\", user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to reject user\" });\n    }\n  });\n\n  // Get messages for current user\n  app.get(\"/api/messages\", requireAuth, async (req, res) => {\n    try {\n      const adminId = req.session.isAdmin ? req.session.userId! : \"admin-id\";\n      const userId = req.session.isAdmin ? undefined : req.session.userId!;\n      \n      let messages;\n      if (req.session.isAdmin) {\n        // Admin sees all messages\n        messages = await storage.getMessages(adminId);\n      } else {\n        // User sees messages with admin\n        messages = await storage.getMessages(userId!, adminId);\n      }\n      \n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Get conversations (admin only)\n  app.get(\"/api/admin/conversations\", requireAdmin, async (req, res) => {\n    try {\n      const conversations = await storage.getConversations(req.session.userId!);\n      res.json(conversations);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  // Send message\n  app.post(\"/api/messages\", requireAuth, async (req, res) => {\n    try {\n      const { content, toUserId } = req.body;\n      \n      const message = await storage.createMessage({\n        fromUserId: req.session.userId!,\n        toUserId: toUserId || (req.session.isAdmin ? undefined : \"admin-id\"),\n        content,\n        isFromAdmin: req.session.isAdmin,\n      });\n\n      // Broadcast message via WebSocket\n      if (wss) {\n        const messageData = JSON.stringify({\n          type: 'message',\n          data: message\n        });\n        \n        wss.clients.forEach(client => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(messageData);\n          }\n        });\n      }\n\n      res.json(message);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  // Get user accounts\n  app.get(\"/api/accounts\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user?.isApproved) {\n        return res.status(403).json({ message: \"Account not approved\" });\n      }\n\n      const accounts = await storage.getAccountsByUserId(req.session.userId!);\n      res.json(accounts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch accounts\" });\n    }\n  });\n\n  // Get user transactions\n  app.get(\"/api/transactions\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user?.isApproved) {\n        return res.status(403).json({ message: \"Account not approved\" });\n      }\n\n      const accounts = await storage.getAccountsByUserId(req.session.userId!);\n      const allTransactions = [];\n      \n      for (const account of accounts) {\n        const transactions = await storage.getTransactionsByAccountId(account.id);\n        allTransactions.push(...transactions);\n      }\n\n      res.json(allTransactions.sort((a, b) => \n        new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n      ));\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Get all transactions (admin only)\n  app.get(\"/api/admin/transactions\", requireAdmin, async (req, res) => {\n    try {\n      const transactions = await storage.getAllTransactions();\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time messaging\n  let wss: WebSocketServer;\n  wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws) => {\n    console.log('Client connected to WebSocket');\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log('Received WebSocket message:', data);\n        \n        // Broadcast message to all connected clients\n        wss.clients.forEach(client => {\n          if (client !== ws && client.readyState === WebSocket.OPEN) {\n            client.send(message.toString());\n          }\n        });\n      } catch (error) {\n        console.error('Invalid WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('Client disconnected from WebSocket');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":12033},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Message,\n  type InsertMessage,\n  type Account,\n  type InsertAccount,\n  type Transaction,\n  type InsertTransaction,\n  type LoanApplication,\n  type InsertLoanApplication,\n} from \"@shared/schema\";\nimport { connectDB } from \"./db\";\nimport bcrypt from \"bcrypt\";\nimport { ObjectId } from \"mongodb\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  updateUserApproval(id: string, isApproved: boolean): Promise<User | undefined>;\n  getPendingUsers(): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  getMessages(userId1: string, userId2?: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getConversations(adminId: string): Promise<{user: User, lastMessage: Message | null, unreadCount: number}[]>;\n  getAccountsByUserId(userId: string): Promise<Account[]>;\n  createAccount(account: InsertAccount): Promise<Account>;\n  getTransactionsByAccountId(accountId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getAllTransactions(): Promise<(Transaction & {accountNumber: string, userName: string})[]>;\n  getLoanApplicationsByUserId(userId: string): Promise<LoanApplication[]>;\n  createLoanApplication(loan: InsertLoanApplication): Promise<LoanApplication>;\n  getAllLoanApplications(): Promise<(LoanApplication & {userName: string})[]>;\n  getAdminByCredentials(email: string, username: string): Promise<User | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const db = await connectDB();\n    return await db.collection<User>(\"users\").findOne({ id }) || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const db = await connectDB();\n    return await db.collection<User>(\"users\").findOne({ email }) || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const db = await connectDB();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = {\n      ...insertUser,\n      password: hashedPassword,\n      id: new ObjectId().toString(),\n      isApproved: false,\n      isAdmin: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    await db.collection<User>(\"users\").insertOne(user);\n    return user;\n  }\n\n  async updateUserApproval(id: string, isApproved: boolean): Promise<User | undefined> {\n    const db = await connectDB();\n    const result = await db.collection<User>(\"users\").findOneAndUpdate(\n      { id },\n      { $set: { isApproved, updatedAt: new Date() } },\n      { returnDocument: \"after\" }\n    );\n    return result || undefined;\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    const db = await connectDB();\n    return await db.collection<User>(\"users\").find({ isApproved: false, isAdmin: false }).sort({ createdAt: -1 }).toArray();\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const db = await connectDB();\n    return await db.collection<User>(\"users\").find({ isAdmin: false }).sort({ createdAt: -1 }).toArray();\n  }\n\n  async getMessages(userId1: string, userId2?: string): Promise<Message[]> {\n    const db = await connectDB();\n    if (userId2) {\n      return await db.collection<Message>(\"messages\").find({\n        $or: [\n          { fromUserId: userId1, toUserId: userId2 },\n          { fromUserId: userId2, toUserId: userId1 }\n        ]\n      }).sort({ createdAt: 1 }).toArray();\n    } else {\n      return await db.collection<Message>(\"messages\").find({\n        $or: [\n          { fromUserId: userId1 },\n          { toUserId: userId1 }\n        ]\n      }).sort({ createdAt: 1 }).toArray();\n    }\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const db = await connectDB();\n    const msg: Message = {\n      ...message,\n      id: new ObjectId().toString(),\n      createdAt: new Date(),\n    };\n    await db.collection<Message>(\"messages\").insertOne(msg);\n    return msg;\n  }\n\n  async getConversations(adminId: string): Promise<{user: User, lastMessage: Message | null, unreadCount: number}[]> {\n    const allUsers = await this.getAllUsers();\n    const conversations: {user: User, lastMessage: Message | null, unreadCount: number}[] = [];\n    for (const user of allUsers) {\n      const userMessages = await this.getMessages(adminId, user.id);\n      const lastMessage = userMessages.length > 0 ? userMessages[userMessages.length - 1] : null;\n      const unreadCount = userMessages.filter(msg => msg.fromUserId === user.id && msg.toUserId === adminId).length;\n      conversations.push({ user, lastMessage, unreadCount });\n    }\n    return conversations.sort((a, b) => {\n      if (!a.lastMessage && !b.lastMessage) return 0;\n      if (!a.lastMessage) return 1;\n      if (!b.lastMessage) return -1;\n      return new Date(b.lastMessage!.createdAt!).getTime() - new Date(a.lastMessage!.createdAt!).getTime();\n    });\n  }\n\n  async getAccountsByUserId(userId: string): Promise<Account[]> {\n    const db = await connectDB();\n    return await db.collection<Account>(\"accounts\").find({ userId }).toArray();\n  }\n\n  async createAccount(account: InsertAccount): Promise<Account> {\n    const db = await connectDB();\n    const accountNumber = `SPB${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n    const acc: Account = {\n      ...account,\n      id: new ObjectId().toString(),\n      accountNumber,\n      isActive: true,\n      createdAt: new Date(),\n    };\n    await db.collection<Account>(\"accounts\").insertOne(acc);\n    return acc;\n  }\n\n  async getTransactionsByAccountId(accountId: string): Promise<Transaction[]> {\n    const db = await connectDB();\n    return await db.collection<Transaction>(\"transactions\").find({ accountId }).sort({ createdAt: -1 }).toArray();\n  }\n\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const db = await connectDB();\n    const tx: Transaction = {\n      ...transaction,\n      id: new ObjectId().toString(),\n      status: \"completed\",\n      createdAt: new Date(),\n    };\n    await db.collection<Transaction>(\"transactions\").insertOne(tx);\n    return tx;\n  }\n\n  async getAllTransactions(): Promise<(Transaction & {accountNumber: string, userName: string})[]> {\n    const db = await connectDB();\n    const txs = await db.collection<Transaction>(\"transactions\").find({}).sort({ createdAt: -1 }).toArray();\n    const accounts = await db.collection<Account>(\"accounts\").find({}).toArray();\n    const users = await db.collection<User>(\"users\").find({}).toArray();\n    return txs.map(tx => {\n      const acc = accounts.find(a => a.id === tx.accountId);\n      const user = users.find(u => u.id === acc?.userId);\n      return {\n        ...tx,\n        accountNumber: acc?.accountNumber || \"\",\n        userName: user ? `${user.firstName} ${user.lastName}`.trim() : \"\"\n      };\n    });\n  }\n\n  async getLoanApplicationsByUserId(userId: string): Promise<LoanApplication[]> {\n    const db = await connectDB();\n    return await db.collection<LoanApplication>(\"loanApplications\").find({ userId }).sort({ createdAt: -1 }).toArray();\n  }\n\n  async createLoanApplication(loan: InsertLoanApplication): Promise<LoanApplication> {\n    const db = await connectDB();\n    const loanApp: LoanApplication = {\n      ...loan,\n      id: new ObjectId().toString(),\n      status: \"pending\",\n      createdAt: new Date(),\n    };\n    await db.collection<LoanApplication>(\"loanApplications\").insertOne(loanApp);\n    return loanApp;\n  }\n\n  async getAllLoanApplications(): Promise<(LoanApplication & {userName: string})[]> {\n    const db = await connectDB();\n    const loans = await db.collection<LoanApplication>(\"loanApplications\").find({}).sort({ createdAt: -1 }).toArray();\n    const users = await db.collection<User>(\"users\").find({}).toArray();\n    return loans.map(loan => {\n      const user = users.find(u => u.id === loan.userId);\n      return {\n        ...loan,\n        userName: user ? `${user.firstName} ${user.lastName}`.trim() : \"\"\n      };\n    });\n  }\n\n  async getAdminByCredentials(email: string, username: string): Promise<User | undefined> {\n    // Hardcoded admin credentials as specified\n    if (email === \"spb@admin.io\" && username === \"SPB Admin\") {\n      return {\n        id: \"admin-id\",\n        firstName: \"SPB\",\n        lastName: \"Admin\",\n        email: \"spb@admin.io\",\n        password: \"\",\n        ssn: \"\",\n        phone: \"\",\n        streetAddress: \"\",\n        city: \"\",\n        state: \"\",\n        zipCode: \"\",\n        dateOfBirth: new Date(),\n        isApproved: true,\n        isAdmin: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":8842},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Insert schemas\nexport const insertUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  ssn: z.string().min(1, \"SSN is required\"),\n  phone: z.string().min(1, \"Phone number is required\"),\n  streetAddress: z.string().min(1, \"Street address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  zipCode: z.string().min(1, \"ZIP code is required\"),\n  dateOfBirth: z.date(),\n});\n\nexport const insertMessageSchema = z.object({\n  fromUserId: z.string(),\n  toUserId: z.string().optional(),\n  content: z.string().min(1, \"Message content is required\"),\n  isFromAdmin: z.boolean().default(false),\n});\n\nexport const insertAccountSchema = z.object({\n  userId: z.string(),\n  accountNumber: z.string(),\n  accountType: z.string().default(\"checking\"),\n  balance: z.string().default(\"0.00\"),\n  isActive: z.boolean().default(true),\n});\n\nexport const insertTransactionSchema = z.object({\n  accountId: z.string(),\n  type: z.string(), // 'credit', 'debit', 'transfer'\n  amount: z.string(),\n  description: z.string().optional(),\n  status: z.string().default(\"completed\"), // 'pending', 'completed', 'failed'\n});\n\nexport const insertLoanApplicationSchema = z.object({\n  userId: z.string(),\n  loanType: z.string(),\n  requestedAmount: z.string(),\n  purpose: z.string().optional(),\n  status: z.string().default(\"pending\"), // 'pending', 'approved', 'rejected'\n});\n\n// Auth schemas\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const adminLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Types\nexport type User = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  password: string;\n  ssn: string;\n  phone: string;\n  streetAddress: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  dateOfBirth: Date;\n  isApproved: boolean;\n  isAdmin: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginSchema>;\nexport type AdminLogin = z.infer<typeof adminLoginSchema>;\n\nexport type Message = {\n  id: string;\n  fromUserId: string;\n  toUserId?: string;\n  content: string;\n  isFromAdmin: boolean;\n  createdAt: Date;\n};\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\nexport type Account = {\n  id: string;\n  userId: string;\n  accountNumber: string;\n  accountType: string;\n  balance: string;\n  isActive: boolean;\n  createdAt: Date;\n};\n\nexport type InsertAccount = z.infer<typeof insertAccountSchema>;\n\nexport type Transaction = {\n  id: string;\n  accountId: string;\n  type: string;\n  amount: string;\n  description?: string;\n  status: string;\n  createdAt: Date;\n};\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type LoanApplication = {\n  id: string;\n  userId: string;\n  loanType: string;\n  requestedAmount: string;\n  purpose?: string;\n  status: string;\n  createdAt: Date;\n};\n\nexport type InsertLoanApplication = z.infer<typeof insertLoanApplicationSchema>;","size_bytes":3455},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nimport Landing from \"@/pages/landing\";\nimport SignUp from \"@/pages/signup\";\nimport SignIn from \"@/pages/signin\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport UserDashboard from \"@/pages/user-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { user, isLoading, isAuthenticated, isAdmin } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/signup\" component={SignUp} />\n          <Route path=\"/signin\" component={SignIn} />\n          <Route path=\"/admin-login\" component={AdminLogin} />\n          <Route path=\"/admin\" component={AdminLogin} />\n        </>\n      ) : isAdmin ? (\n        <>\n          <Route path=\"/\" component={AdminDashboard} />\n          <Route path=\"/admin/*\" component={AdminDashboard} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={UserDashboard} />\n          <Route path=\"/dashboard/*\" component={UserDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2024},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.message-bubble {\n  max-width: 70%;\n  word-wrap: break-word;\n}\n\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n","size_bytes":5740},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/types/session.d.ts":{"content":"import \"express-session\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId: string;\n    isAdmin: boolean;\n    isApproved: boolean;\n  }\n}","size_bytes":160},"client/src/components/admin-sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ShieldCheck, PieChart, Users, CheckCircle, MessageCircle, ArrowLeftRight, Shield, Settings, LogOut } from \"lucide-react\";\n\ninterface AdminSidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n  isOpen: boolean;\n  onToggle: () => void;\n  onLogout: () => void;\n}\n\nexport default function AdminSidebar({ \n  activeSection, \n  onSectionChange, \n  isOpen, \n  onToggle, \n  onLogout \n}: AdminSidebarProps) {\n  return (\n    <>\n      {/* Admin Sidebar */}\n      <aside \n        className={`bg-gray-900 text-white w-64 transition-transform duration-300 ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        } md:translate-x-0 fixed md:relative z-30 h-full`}\n      >\n        <div className=\"p-6 border-b border-gray-700\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"bg-red-600 p-2 rounded\">\n              <ShieldCheck />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-admin-panel\">SPB Admin Panel</h3>\n              <p className=\"text-xs text-gray-400\">Administrative Control</p>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"p-4 space-y-2\">\n          <Button\n            variant={activeSection === \"dashboard\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => onSectionChange(\"dashboard\")}\n            data-testid=\"button-nav-dashboard\"\n          >\n            <PieChart className=\"mr-3 h-4 w-4\" />\n            Dashboard\n          </Button>\n          \n          <Button\n            variant={activeSection === \"users\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => onSectionChange(\"users\")}\n            data-testid=\"button-nav-users\"\n          >\n            <Users className=\"mr-3 h-4 w-4\" />\n            User Management\n            <Badge variant=\"destructive\" className=\"ml-auto text-xs\">\n              New\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"approvals\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => onSectionChange(\"approvals\")}\n            data-testid=\"button-nav-approvals\"\n          >\n            <CheckCircle className=\"mr-3 h-4 w-4\" />\n            Approvals\n            <Badge variant=\"default\" className=\"ml-auto text-xs bg-amber-500\">\n              3\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"messages\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => onSectionChange(\"messages\")}\n            data-testid=\"button-nav-messages\"\n          >\n            <MessageCircle className=\"mr-3 h-4 w-4\" />\n            Messages\n            <Badge variant=\"default\" className=\"ml-auto text-xs bg-blue-500\">\n              7\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"transactions\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => onSectionChange(\"transactions\")}\n            data-testid=\"button-nav-transactions\"\n          >\n            <ArrowLeftRight className=\"mr-3 h-4 w-4\" />\n            Transactions\n          </Button>\n          \n          <Button\n            variant={activeSection === \"security\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => onSectionChange(\"security\")}\n            data-testid=\"button-nav-security\"\n          >\n            <Shield className=\"mr-3 h-4 w-4\" />\n            Security\n          </Button>\n          \n          <Button\n            variant={activeSection === \"settings\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => onSectionChange(\"settings\")}\n            data-testid=\"button-nav-settings\"\n          >\n            <Settings className=\"mr-3 h-4 w-4\" />\n            Settings\n          </Button>\n        </nav>\n        \n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <Button\n            onClick={onLogout}\n            variant=\"outline\"\n            className=\"w-full text-red-400 hover:bg-red-900 border-red-400\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n      \n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":4993},"client/src/components/message-chat.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Send } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MessageChat() {\n  const [messageInput, setMessageInput] = useState(\"\");\n  const { user } = useAuth();\n  const { sendMessage: sendWebSocketMessage } = useWebSocket();\n  const queryClient = useQueryClient();\n\n  // Get messages\n  const { data: messages = [] } = useQuery({\n    queryKey: [\"/api/messages\"],\n    refetchInterval: 5000, // Refresh every 5 seconds\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const response = await apiRequest(\"POST\", \"/api/messages\", { content });\n      return response.json();\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (messageInput.trim()) {\n      sendMessageMutation.mutate(messageInput.trim());\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Card className=\"h-96 flex flex-col\" data-testid=\"card-messages\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Messages</CardTitle>\n          <span className=\"text-sm text-muted-foreground\">Admin Support</span>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 flex flex-col\">\n        <div className=\"flex-1 overflow-y-auto space-y-4 mb-4 max-h-64\">\n          {messages.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <Shield className=\"h-8 w-8 mx-auto mb-2\" />\n              <p>No messages yet. Start a conversation!</p>\n            </div>\n          ) : (\n            messages.map((message: any, index: number) => (\n              <div\n                key={index}\n                className={`flex items-start space-x-3 ${\n                  message.isFromAdmin ? \"\" : \"justify-end\"\n                }`}\n              >\n                {message.isFromAdmin && (\n                  <div className=\"bg-red-600 text-white p-2 rounded-full w-8 h-8 flex items-center justify-center text-xs\">\n                    <Shield className=\"h-3 w-3\" />\n                  </div>\n                )}\n                <div className={`max-w-sm p-3 rounded-lg ${\n                  message.isFromAdmin \n                    ? \"bg-muted\" \n                    : \"bg-primary text-primary-foreground ml-auto\"\n                }`}>\n                  <p className=\"text-sm\">{message.content}</p>\n                  <span className=\"text-xs opacity-70 mt-1 block\">\n                    {new Date(message.createdAt).toLocaleTimeString()}\n                  </span>\n                </div>\n                {!message.isFromAdmin && (\n                  <div className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs\">\n                    {user?.firstName?.charAt(0)}\n                  </div>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Input\n            value={messageInput}\n            onChange={(e) => setMessageInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            onKeyPress={handleKeyPress}\n            data-testid=\"input-message\"\n          />\n          <Button\n            onClick={handleSendMessage}\n            disabled={sendMessageMutation.isPending || !messageInput.trim()}\n            data-testid=\"button-send-message\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4144},"client/src/components/user-sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Shield, \n  TrendingUp, \n  Wallet, \n  ArrowLeftRight, \n  HandHeart, \n  MessageCircle, \n  Headphones, \n  LogOut,\n  Home,\n  Sparkles,\n  Crown\n} from \"lucide-react\";\n\ninterface UserSidebarProps {\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n  isOpen: boolean;\n  onToggle: () => void;\n  onLogout: () => void;\n  isApproved: boolean;\n}\n\nexport default function UserSidebar({ \n  activeSection, \n  onSectionChange, \n  isOpen, \n  onToggle, \n  onLogout,\n  isApproved \n}: UserSidebarProps) {\n  return (\n    <>\n      {/* Sidebar */}\n      <aside \n        className={`bg-white/80 backdrop-blur-xl border-r border-white/20 shadow-xl w-64 transition-transform duration-300 ${\n          isOpen ? 'translate-x-0' : '-translate-x-full'\n        } md:translate-x-0 fixed md:relative z-30 h-full`}\n      >\n        {/* Header */}\n        <div className=\"p-6 border-b border-white/20\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"relative\">\n              <div className=\"bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800 text-white p-3 rounded-xl shadow-xl\">\n                <Shield className=\"h-6 w-6\" />\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n            </div>\n            <div>\n              <h3 className=\"font-bold text-gray-900\" data-testid=\"text-bank-name\">SPB Banking</h3>\n              <p className=\"text-xs text-gray-600\">Personal Dashboard</p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2\">\n          <Button\n            variant={activeSection === \"overview\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 ${\n              activeSection === \"overview\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"overview\")}\n            data-testid=\"button-nav-overview\"\n          >\n            <TrendingUp className=\"mr-3 h-5 w-5\" />\n            Overview\n          </Button>\n          \n          <Button\n            variant={activeSection === \"accounts\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 ${\n              activeSection === \"accounts\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"accounts\")}\n            data-testid=\"button-nav-accounts\"\n          >\n            <Wallet className=\"mr-3 h-5 w-5\" />\n            Accounts\n            {!isApproved && (\n              <Badge variant=\"outline\" className=\"ml-auto text-xs bg-amber-50 text-amber-700 border-amber-200\">\n                Locked\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"transactions\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 ${\n              activeSection === \"transactions\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"transactions\")}\n            data-testid=\"button-nav-transactions\"\n          >\n            <ArrowLeftRight className=\"mr-3 h-5 w-5\" />\n            Transactions\n            {!isApproved && (\n              <Badge variant=\"outline\" className=\"ml-auto text-xs bg-amber-50 text-amber-700 border-amber-200\">\n                Locked\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"loans\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 ${\n              activeSection === \"loans\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"loans\")}\n            data-testid=\"button-nav-loans\"\n          >\n            <HandHeart className=\"mr-3 h-5 w-5\" />\n            Loans\n            {!isApproved && (\n              <Badge variant=\"outline\" className=\"ml-auto text-xs bg-amber-50 text-amber-700 border-amber-200\">\n                Locked\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"messages\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 relative ${\n              activeSection === \"messages\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"messages\")}\n            data-testid=\"button-nav-messages\"\n          >\n            <MessageCircle className=\"mr-3 h-5 w-5\" />\n            Messages\n            <Badge className=\"ml-auto text-xs bg-green-500 text-white border-0\">\n              Live\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"support\" ? \"default\" : \"ghost\"}\n            className={`w-full justify-start transition-all duration-200 ${\n              activeSection === \"support\" \n                ? \"bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg\" \n                : \"hover:bg-blue-50 text-gray-700\"\n            }`}\n            onClick={() => onSectionChange(\"support\")}\n            data-testid=\"button-nav-support\"\n          >\n            <Headphones className=\"mr-3 h-5 w-5\" />\n            Support\n            <div className=\"ml-auto w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n          </Button>\n        </nav>\n        \n        {/* Status Badge */}\n        <div className=\"px-4 mb-4\">\n          <div className={`p-3 rounded-xl border-2 ${\n            isApproved \n              ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-green-200' \n              : 'bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200'\n          }`}>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`p-1 rounded-full ${isApproved ? 'bg-green-100' : 'bg-amber-100'}`}>\n                {isApproved ? (\n                  <Crown className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <Sparkles className=\"h-4 w-4 text-amber-600\" />\n                )}\n              </div>\n              <div>\n                <p className={`text-xs font-semibold ${isApproved ? 'text-green-800' : 'text-amber-800'}`}>\n                  {isApproved ? \"Premium Member\" : \"Account Pending\"}\n                </p>\n                <p className={`text-xs ${isApproved ? 'text-green-600' : 'text-amber-600'}`}>\n                  {isApproved ? \"All features unlocked\" : \"Under review\"}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Logout Button */}\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <Button\n            onClick={onLogout}\n            className=\"w-full bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n      \n      {/* Mobile overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-20 md:hidden\"\n          onClick={onToggle}\n        />\n      )}\n    </>\n  );\n}","size_bytes":7967},"client/src/hooks/use-auth.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  isApproved: boolean;\n  isAdmin: boolean;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      if (res.status === 401) {\n        return null;\n      }\n      \n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(`${res.status}: ${text}`);\n      }\n      \n      return res.json();\n    },\n  });\n\n  // Handle unauthorized errors at the page level\n  if (error && isUnauthorizedError(error as Error)) {\n    // User is not authenticated, redirect handled by router\n  }\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Invalid Credentials\",\n          description: \"Please check your email and password.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const adminLoginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/admin-login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      setLocation(\"/\");\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    isAdmin: user?.isAdmin || false,\n    isApproved: user?.isApproved || false,\n    login: loginMutation.mutateAsync,\n    register: registerMutation.mutateAsync,\n    adminLogin: adminLoginMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n    isLoginPending: loginMutation.isPending,\n    isRegisterPending: registerMutation.isPending,\n    isAdminLoginPending: adminLoginMutation.isPending,\n    isLogoutPending: logoutMutation.isPending,\n  };\n}\n","size_bytes":3247},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  isApproved: boolean;\n  isAdmin?: boolean;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const adminLoginMutation = useMutation({\n    mutationFn: async (credentials: { email: string; username: string; password: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/admin-login\", credentials);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.clear();\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    isAdmin: user?.isAdmin || false,\n    isApproved: user?.isApproved || false,\n    login: loginMutation.mutateAsync,\n    register: registerMutation.mutateAsync,\n    adminLogin: adminLoginMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n    isLoginPending: loginMutation.isPending,\n    isRegisterPending: registerMutation.isPending,\n    isAdminLoginPending: adminLoginMutation.isPending,\n    isLogoutPending: logoutMutation.isPending,\n  };\n}\n","size_bytes":2227},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface Message {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  content: string;\n  isFromAdmin: boolean;\n  createdAt: string;\n}\n\nexport function useWebSocket() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log(\"WebSocket connected\");\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'message') {\n          setMessages(prev => [...prev, data.data]);\n        }\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log(\"WebSocket disconnected\");\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    messages,\n    isConnected,\n    sendMessage,\n  };\n}\n","size_bytes":1510},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log(\"WebSocket connected\");\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log(\"WebSocket message received:\", data);\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log(\"WebSocket disconnected\");\n    };\n\n    ws.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: WebSocketMessage) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    sendMessage,\n    socket: wsRef.current,\n  };\n}\n","size_bytes":1407},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ShieldCheck, Users, CheckCircle, MessageCircle, DollarSign, BarChart3, Settings, LogOut, Menu, UserPlus, Check, X, Eye } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/admin-sidebar\";\n\ntype AdminSection = \"dashboard\" | \"users\" | \"approvals\" | \"messages\" | \"transactions\" | \"security\" | \"settings\";\n\nexport default function AdminDashboard() {\n  const [activeSection, setActiveSection] = useState<AdminSection>(\"dashboard\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"dashboard\":\n        return <AdminOverview />;\n      case \"users\":\n        return <UsersManagement />;\n      case \"approvals\":\n        return <ApprovalsSection />;\n      case \"messages\":\n        return <AdminMessages />;\n      case \"transactions\":\n        return <TransactionsOverview />;\n      case \"security\":\n        return <SecuritySection />;\n      case \"settings\":\n        return <SettingsSection />;\n      default:\n        return <AdminOverview />;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <AdminSidebar \n        activeSection={activeSection}\n        onSectionChange={setActiveSection}\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n        onLogout={handleLogout}\n      />\n      \n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white border-b border-border p-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-toggle-sidebar\"\n            >\n              <Menu className=\"h-6 w-6\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-semibold\" data-testid=\"text-admin-dashboard\">Admin Dashboard</h1>\n              <p className=\"text-muted-foreground\">Secure Professional Bank Management</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"bg-red-600 text-white p-2 rounded-full\">\n                <ShieldCheck className=\"h-5 w-5\" />\n              </div>\n              <span className=\"font-medium\" data-testid=\"text-admin-name\">SPB Admin</span>\n            </div>\n          </div>\n        </header>\n        \n        {/* Dashboard Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {renderContent()}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction AdminOverview() {\n  const { data: allUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  const { data: pendingUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n    retry: false,\n  });\n\n  const totalUsers = allUsers.length;\n  const pendingCount = pendingUsers.length;\n  const approvedUsers = allUsers.filter((u: any) => u.isApproved).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid lg:grid-cols-4 gap-6\">\n        <Card data-testid=\"card-total-users\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Total Users</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"text-total-users\">{totalUsers}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-blue-500\" />\n            </div>\n            <p className=\"text-sm text-green-600 mt-2\">Active accounts</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-pending-approvals\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Pending Approvals</p>\n                <p className=\"text-3xl font-bold text-amber-600\" data-testid=\"text-pending-approvals\">\n                  {pendingCount}\n                </p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-amber-500\" />\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">Requires attention</p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-active-accounts\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Active Accounts</p>\n                <p className=\"text-3xl font-bold text-green-600\" data-testid=\"text-active-accounts\">{approvedUsers}</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-green-500\" />\n            </div>\n            <p className=\"text-sm text-green-600 mt-2\">\n              {totalUsers > 0 ? ((approvedUsers / totalUsers) * 100).toFixed(1) : 0}% approval rate\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-total-transactions\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground\">Total Transactions</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"text-total-transactions\">$0</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-500\" />\n            </div>\n            <p className=\"text-sm text-muted-foreground mt-2\">System ready</p>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <Card data-testid=\"card-recent-activity\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {pendingUsers.slice(0, 3).map((user: any) => (\n              <div key={user.id} className=\"flex items-center space-x-3 p-3 border-l-4 border-blue-500 bg-blue-50\">\n                <UserPlus className=\"text-blue-500\" />\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">New user registration</p>\n                  <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">\n                  {new Date(user.createdAt).toLocaleDateString()}\n                </span>\n              </div>\n            ))}\n            {pendingUsers.length === 0 && (\n              <p className=\"text-muted-foreground text-center py-4\">No recent activity</p>\n            )}\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-quick-actions\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-review-approvals\">\n                <CheckCircle className=\"h-6 w-6 text-green-500 mb-2\" />\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">Review Approvals</p>\n                  <p className=\"text-sm text-muted-foreground\">{pendingCount} pending</p>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-view-messages\">\n                <MessageCircle className=\"h-6 w-6 text-blue-500 mb-2\" />\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">View Messages</p>\n                  <p className=\"text-sm text-muted-foreground\">Available</p>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-manage-users\">\n                <Users className=\"h-6 w-6 text-purple-500 mb-2\" />\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">Manage Users</p>\n                  <p className=\"text-sm text-muted-foreground\">{totalUsers} total</p>\n                </div>\n              </Button>\n              <Button variant=\"outline\" className=\"h-20 flex flex-col\" data-testid=\"button-security\">\n                <ShieldCheck className=\"h-6 w-6 text-red-500 mb-2\" />\n                <div className=\"text-center\">\n                  <p className=\"font-medium\">Security</p>\n                  <p className=\"text-sm text-muted-foreground\">All secure</p>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nfunction UsersManagement() {\n  const { data: users = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  return (\n    <Card data-testid=\"card-user-management\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>User Management</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Input placeholder=\"Search users...\" className=\"w-64\" data-testid=\"input-search-users\" />\n            <Select>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"suspended\">Suspended</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"text-left py-3 px-4\">User</th>\n                <th className=\"text-left py-3 px-4\">Email</th>\n                <th className=\"text-left py-3 px-4\">Status</th>\n                <th className=\"text-left py-3 px-4\">Registration Date</th>\n                <th className=\"text-left py-3 px-4\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.map((user: any) => (\n                <tr key={user.id} className=\"border-b border-border hover:bg-accent\">\n                  <td className=\"py-3 px-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm\">\n                        {user.firstName[0]}{user.lastName[0]}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\" data-testid={`text-user-name-${user.id}`}>\n                          {user.firstName} {user.lastName}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">ID: #{user.id.slice(-8)}</p>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"py-3 px-4\" data-testid={`text-user-email-${user.id}`}>{user.email}</td>\n                  <td className=\"py-3 px-4\">\n                    <Badge \n                      variant={user.isApproved ? \"default\" : \"secondary\"}\n                      className={user.isApproved ? \"bg-green-100 text-green-800\" : \"bg-amber-100 text-amber-800\"}\n                      data-testid={`badge-user-status-${user.id}`}\n                    >\n                      {user.isApproved ? \"Approved\" : \"Pending\"}\n                    </Badge>\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </td>\n                  <td className=\"py-3 px-4\">\n                    <div className=\"flex space-x-2\">\n                      {!user.isApproved && (\n                        <Button \n                          size=\"sm\" \n                          className=\"bg-green-500 hover:bg-green-600\"\n                          data-testid={`button-approve-${user.id}`}\n                        >\n                          Approve\n                        </Button>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`button-view-${user.id}`}\n                      >\n                        View\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction ApprovalsSection() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: pendingUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n    retry: false,\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/approve-user/${userId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"User Approved\",\n        description: \"The user has been successfully approved.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve user. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/reject-user/${userId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n      toast({\n        title: \"User Rejected\",\n        description: \"The user has been rejected.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject user. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Card data-testid=\"card-pending-approvals\">\n      <CardHeader>\n        <CardTitle>Pending Approvals</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {pendingUsers.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <CheckCircle className=\"h-12 w-12 mx-auto mb-4\" />\n              <p>No pending approvals</p>\n            </div>\n          ) : (\n            pendingUsers.map((user: any) => (\n              <div key={user.id} className=\"border border-border rounded-lg p-6\" data-testid={`card-approval-${user.id}`}>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                      {user.firstName[0]}{user.lastName[0]}\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold\" data-testid={`text-approval-user-name-${user.id}`}>\n                        {user.firstName} {user.lastName}\n                      </h4>\n                      <p className=\"text-muted-foreground\" data-testid={`text-approval-user-email-${user.id}`}>\n                        {user.email}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Applied: {new Date(user.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button \n                      className=\"bg-green-500 hover:bg-green-600\"\n                      onClick={() => approveMutation.mutate(user.id)}\n                      disabled={approveMutation.isPending}\n                      data-testid={`button-approve-user-${user.id}`}\n                    >\n                      <Check className=\"h-4 w-4 mr-1\" />\n                      Approve\n                    </Button>\n                    <Button \n                      variant=\"destructive\"\n                      onClick={() => rejectMutation.mutate(user.id)}\n                      disabled={rejectMutation.isPending}\n                      data-testid={`button-reject-user-${user.id}`}\n                    >\n                      <X className=\"h-4 w-4 mr-1\" />\n                      Reject\n                    </Button>\n                    <Button \n                      variant=\"outline\"\n                      data-testid={`button-details-user-${user.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Details\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 grid md:grid-cols-3 gap-4\">\n                  <div className=\"bg-muted p-3 rounded\">\n                    <p className=\"text-sm text-muted-foreground\">SSN</p>\n                    <p className=\"font-medium\" data-testid={`text-user-ssn-${user.id}`}>{user.ssn}</p>\n                  </div>\n                  <div className=\"bg-muted p-3 rounded\">\n                    <p className=\"text-sm text-muted-foreground\">Address</p>\n                    <p className=\"font-medium\" data-testid={`text-user-address-${user.id}`}>\n                      {user.streetAddress}, {user.city}, {user.state}\n                    </p>\n                  </div>\n                  <div className=\"bg-muted p-3 rounded\">\n                    <p className=\"text-sm text-muted-foreground\">Phone</p>\n                    <p className=\"font-medium\" data-testid={`text-user-phone-${user.id}`}>{user.phone}</p>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction AdminMessages() {\n  return (\n    <div className=\"grid lg:grid-cols-3 gap-6\">\n      <Card data-testid=\"card-conversations\">\n        <CardHeader>\n          <CardTitle>Conversations</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12 text-muted-foreground\">\n            <MessageCircle className=\"h-12 w-12 mx-auto mb-4\" />\n            <p>No active conversations</p>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"lg:col-span-2\" data-testid=\"card-message-center\">\n        <CardHeader>\n          <CardTitle>Message Center</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12 text-muted-foreground\">\n            <p>Select a conversation to view messages</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction TransactionsOverview() {\n  return (\n    <Card data-testid=\"card-transaction-overview\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Transaction Overview</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"Last 7 days\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7\">Last 7 days</SelectItem>\n                <SelectItem value=\"30\">Last 30 days</SelectItem>\n                <SelectItem value=\"90\">Last 3 months</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button>Export</Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid lg:grid-cols-4 gap-4 mb-8\">\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <h4 className=\"text-green-700 font-semibold\">Total Volume</h4>\n            <p className=\"text-2xl font-bold text-green-800\" data-testid=\"text-total-volume\">$0</p>\n            <p className=\"text-sm text-green-600\">System ready</p>\n          </div>\n          \n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h4 className=\"text-blue-700 font-semibold\">Transactions</h4>\n            <p className=\"text-2xl font-bold text-blue-800\" data-testid=\"text-transaction-count\">0</p>\n            <p className=\"text-sm text-blue-600\">No transactions yet</p>\n          </div>\n          \n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4\">\n            <h4 className=\"text-purple-700 font-semibold\">Average Transaction</h4>\n            <p className=\"text-2xl font-bold text-purple-800\" data-testid=\"text-avg-transaction\">$0</p>\n            <p className=\"text-sm text-purple-600\">No data</p>\n          </div>\n          \n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n            <h4 className=\"text-amber-700 font-semibold\">Flagged</h4>\n            <p className=\"text-2xl font-bold text-amber-800\" data-testid=\"text-flagged-transactions\">0</p>\n            <p className=\"text-sm text-amber-600\">All secure</p>\n          </div>\n        </div>\n        \n        <div className=\"text-center py-12 text-muted-foreground\">\n          <BarChart3 className=\"h-12 w-12 mx-auto mb-4\" />\n          <p>No transactions to display</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction SecuritySection() {\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-6\">\n      <Card data-testid=\"card-security-overview\">\n        <CardHeader>\n          <CardTitle>Security Overview</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <ShieldCheck className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <p className=\"font-medium\">System Security</p>\n                <p className=\"text-sm text-muted-foreground\">All systems operational</p>\n              </div>\n            </div>\n            <Badge className=\"bg-green-100 text-green-800\">Secure</Badge>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-5 w-5 text-green-500\">🔒</div>\n              <div>\n                <p className=\"font-medium\">SSL Certificate</p>\n                <p className=\"text-sm text-muted-foreground\">Valid until Mar 2025</p>\n              </div>\n            </div>\n            <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n          </div>\n          \n          <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-5 w-5 text-green-500\">🗄</div>\n              <div>\n                <p className=\"font-medium\">Data Encryption</p>\n                <p className=\"text-sm text-muted-foreground\">AES-256 encryption active</p>\n              </div>\n            </div>\n            <Badge className=\"bg-green-100 text-green-800\">Protected</Badge>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card data-testid=\"card-security-events\">\n        <CardHeader>\n          <CardTitle>Recent Security Events</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"p-3 border-l-4 border-green-500 bg-green-50\">\n            <p className=\"font-medium\">System Started</p>\n            <p className=\"text-sm text-muted-foreground\">Banking system initialized</p>\n            <p className=\"text-xs text-muted-foreground\">System startup</p>\n          </div>\n          \n          <div className=\"p-3 border-l-4 border-blue-500 bg-blue-50\">\n            <p className=\"font-medium\">Security Scan Complete</p>\n            <p className=\"text-sm text-muted-foreground\">No vulnerabilities detected</p>\n            <p className=\"text-xs text-muted-foreground\">Automated scan</p>\n          </div>\n          \n          <div className=\"p-3 border-l-4 border-green-500 bg-green-50\">\n            <p className=\"font-medium\">Database Secure</p>\n            <p className=\"text-sm text-muted-foreground\">All connections encrypted</p>\n            <p className=\"text-xs text-muted-foreground\">Connection check</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction SettingsSection() {\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-6\">\n      <Card data-testid=\"card-system-settings\">\n        <CardHeader>\n          <CardTitle>System Settings</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Auto-approval</p>\n              <p className=\"text-sm text-muted-foreground\">Automatically approve verified accounts</p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">Toggle</Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Email Notifications</p>\n              <p className=\"text-sm text-muted-foreground\">Send notifications for new registrations</p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">Toggle</Button>\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"font-medium\">Maintenance Mode</p>\n              <p className=\"text-sm text-muted-foreground\">Disable new registrations temporarily</p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">Toggle</Button>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card data-testid=\"card-admin-profile\">\n        <CardHeader>\n          <CardTitle>Admin Profile</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Username</label>\n            <Input value=\"SPB Admin\" readOnly data-testid=\"input-admin-username\" />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Email</label>\n            <Input value=\"spb@admin.io\" readOnly data-testid=\"input-admin-email\" />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium mb-2\">Change Password</label>\n            <Input type=\"password\" placeholder=\"Enter new password\" data-testid=\"input-new-password\" />\n          </div>\n          \n          <Button className=\"w-full bg-red-600 hover:bg-red-700\" data-testid=\"button-update-profile\">\n            Update Profile\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":28072},"client/src/pages/admin-login.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { ShieldCheck, ArrowLeft, Eye, EyeOff, Mail, User, Lock, Crown } from \"lucide-react\";\nimport { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst adminLoginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype AdminLoginForm = z.infer<typeof adminLoginSchema>;\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { adminLogin, isAdminLoginPending } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<AdminLoginForm>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: AdminLoginForm) => {\n    try {\n      await adminLogin(data);\n      toast({\n        title: \"Admin Access Granted\",\n        description: \"Welcome to the admin dashboard.\",\n      });\n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Admin Login Failed\",\n        description: \"Invalid admin credentials. Please check your details.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-red-900 to-gray-900 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-red-500/20 to-orange-500/20 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute bottom-20 right-10 w-48 h-48 bg-gradient-to-br from-red-500/20 to-pink-500/20 rounded-full blur-xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-24 h-24 bg-gradient-to-br from-orange-500/20 to-red-500/20 rounded-full blur-xl animate-pulse delay-2000\"></div>\n      </div>\n\n      <div className=\"w-full max-w-md mx-auto relative z-10\">\n        <Card className=\"bg-white/10 backdrop-blur-xl border border-white/20 shadow-2xl rounded-3xl overflow-hidden\" data-testid=\"card-admin-login\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-white/10 via-white/5 to-white/10 pointer-events-none\"></div>\n          \n          <CardHeader className=\"text-center p-8 relative\">\n            <div className=\"bg-gradient-to-br from-red-600 to-orange-600 text-white p-4 rounded-2xl w-fit mx-auto mb-6 shadow-xl\">\n              <Crown className=\"h-10 w-10\" />\n            </div>\n            <CardTitle className=\"text-3xl font-bold text-white mb-2\" data-testid=\"text-admin-login-title\">\n              Admin Portal\n            </CardTitle>\n            <CardDescription className=\"text-gray-300 text-lg\" data-testid=\"text-admin-login-subtitle\">\n              Secure administrative access\n            </CardDescription>\n            \n            {/* Security Badge */}\n            <div className=\"inline-flex items-center space-x-2 bg-red-500/20 backdrop-blur-sm px-4 py-2 rounded-full border border-red-500/30 mt-4\">\n              <ShieldCheck className=\"h-4 w-4 text-red-400\" />\n              <span className=\"text-sm font-medium text-red-200\">Restricted Access</span>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-8 pt-0 relative\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-200 font-semibold\">Admin Username</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                          <Input \n                            placeholder=\"Admin Username\" \n                            className=\"pl-12 h-12 border-white/20 focus:border-red-500 focus:ring-red-500 rounded-xl bg-white/10 text-white placeholder-gray-400\"\n                            data-testid=\"input-username\"\n                            {...field} \n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-200 font-semibold\">Admin Email</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                          <Input \n                            type=\"email\" \n                            placeholder=\"admin@spb.com\" \n                            className=\"pl-12 h-12 border-white/20 focus:border-red-500 focus:ring-red-500 rounded-xl bg-white/10 text-white placeholder-gray-400\"\n                            data-testid=\"input-email\"\n                            {...field} \n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-200 font-semibold\">Admin Password</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                          <Input \n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"••••••••\" \n                            className=\"pl-12 pr-12 h-12 border-white/20 focus:border-red-500 focus:ring-red-500 rounded-xl bg-white/10 text-white placeholder-gray-400\"\n                            data-testid=\"input-password\"\n                            {...field} \n                          />\n                          <button\n                            type=\"button\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-200\"\n                          >\n                            {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                          </button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full h-12 bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white font-semibold rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 group\" \n                  disabled={isAdminLoginPending}\n                  data-testid=\"button-admin-login\"\n                >\n                  {isAdminLoginPending ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                      <span>Authenticating...</span>\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center space-x-2\">\n                      <Crown className=\"h-5 w-5\" />\n                      <span>Admin Login</span>\n                    </div>\n                  )}\n                </Button>\n              </form>\n            </Form>\n            \n            <div className=\"mt-8 space-y-4\">\n              <div className=\"text-center\">\n                <Link href=\"/signin\" className=\"text-gray-300 hover:text-white transition-colors group flex items-center justify-center space-x-2\" data-testid=\"link-back-to-signin\">\n                  <ArrowLeft className=\"h-4 w-4 group-hover:-translate-x-1 transition-transform\" />\n                  <span className=\"font-medium\">Back to User Login</span>\n                </Link>\n              </div>\n              \n              {/* Security Notice */}\n              <div className=\"bg-red-500/10 border border-red-500/20 rounded-xl p-4\">\n                <div className=\"flex items-center space-x-2 text-red-200 text-sm\">\n                  <ShieldCheck className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">This area is restricted to authorized administrators only.</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9817},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { \n  Shield, \n  Clock, \n  Globe, \n  CheckCircle, \n  Menu,\n  X, \n  Smartphone, \n  CreditCard, \n  TrendingUp,\n  Star,\n  ArrowRight,\n  Users,\n  Award,\n  Lock,\n  Zap,\n  HeadphonesIcon,\n  Eye,\n  EyeOff\n} from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Landing() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [currentTestimonial, setCurrentTestimonial] = useState(0);\n\n  const testimonials = [\n    {\n      name: \"Sarah Johnson\",\n      role: \"Business Owner\",\n      content: \"SPB has transformed how I manage my international business. The security and speed are unmatched.\",\n      rating: 5\n    },\n    {\n      name: \"Michael Chen\",\n      role: \"Tech Executive\", \n      content: \"Finally, a bank that understands modern business needs. The dashboard is incredibly intuitive.\",\n      rating: 5\n    },\n    {\n      name: \"Emma Rodriguez\",\n      role: \"Freelancer\",\n      content: \"As a digital nomad, SPB's global accessibility has been a game-changer for my work.\",\n      rating: 5\n    }\n  ];\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background overflow-x-hidden\">\n      {/* Modern Header with Glass Effect */}\n      <header className=\"fixed top-0 w-full z-50 bg-white/80 backdrop-blur-lg border-b border-white/20 shadow-lg\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <div className=\"bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800 text-white p-3 rounded-xl shadow-xl\">\n                  <Shield className=\"h-7 w-7\" />\n                </div>\n                <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse\"></div>\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  Secure Professional Bank\n                </h1>\n                <p className=\"text-xs text-gray-500 hidden sm:block\">Next-Gen Banking Solutions</p>\n              </div>\n            </div>\n            \n            <nav className=\"hidden lg:flex items-center space-x-8\">\n              <a href=\"#personal\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200\">Personal</a>\n              <a href=\"#business\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200\">Business</a>\n              <a href=\"#support\" className=\"text-gray-600 hover:text-blue-600 font-medium transition-colors duration-200\">Support</a>\n              <Link href=\"/signin\">\n                <Button variant=\"ghost\" className=\"font-medium hover:bg-blue-50\">Sign In</Button>\n              </Link>\n              <Link href=\"/signup\">\n                <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-6 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  Get Started\n                </Button>\n              </Link>\n            </nav>\n            \n            <Button \n              className=\"lg:hidden bg-gradient-to-r from-blue-600 to-purple-600 text-white p-2\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n            >\n              {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n            </Button>\n          </div>\n\n          {/* Mobile Menu */}\n          {isMenuOpen && (\n            <div className=\"lg:hidden mt-4 pb-4 space-y-3 border-t border-gray-200\">\n              <a href=\"#personal\" className=\"block py-2 text-gray-600 hover:text-blue-600\">Personal Banking</a>\n              <a href=\"#business\" className=\"block py-2 text-gray-600 hover:text-blue-600\">Business Solutions</a>\n              <a href=\"#support\" className=\"block py-2 text-gray-600 hover:text-blue-600\">24/7 Support</a>\n              <div className=\"flex space-x-3 pt-2\">\n                <Link href=\"/signin\" className=\"flex-1\">\n                  <Button variant=\"outline\" className=\"w-full\">Sign In</Button>\n                </Link>\n                <Link href=\"/signup\" className=\"flex-1\">\n                  <Button className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600\">Get Started</Button>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Revolutionary Hero Section */}\n      <section className=\"relative min-h-screen flex items-center overflow-hidden bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900 py-20\">\n        {/* Animated Background Elements */}\n        <div className=\"absolute inset-0\">\n          <div className=\"absolute top-20 left-10 w-32 h-32 bg-blue-500/20 rounded-full blur-xl animate-pulse\"></div>\n          <div className=\"absolute top-40 right-20 w-48 h-48 bg-purple-500/20 rounded-full blur-xl animate-pulse delay-1000\"></div>\n          <div className=\"absolute bottom-20 left-1/3 w-24 h-24 bg-cyan-500/20 rounded-full blur-xl animate-pulse delay-2000\"></div>\n        </div>\n\n        <div className=\"container mx-auto px-4 pt-12 pb-20 relative z-10\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8 text-white text-center lg:text-left\">\n              <div className=\"space-y-6\">\n                <div className=\"inline-flex items-center space-x-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20\">\n                  <Star className=\"h-4 w-4 text-yellow-400\" />\n                  <span className=\"text-sm font-medium\">Rated #1 Digital Bank 2024</span>\n                </div>\n                \n                <h2 className=\"text-5xl lg:text-7xl font-bold leading-tight\">\n                  <span className=\"bg-gradient-to-r from-white via-blue-100 to-purple-100 bg-clip-text text-transparent\">\n                    Banking\n                  </span>\n                  <br />\n                  <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                    Reimagined\n                  </span>\n                </h2>\n                \n                <p className=\"text-xl lg:text-2xl text-blue-100 max-w-xl leading-relaxed\">\n                  Experience the future of banking with AI-powered insights, instant global transfers, and military-grade security.\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Link href=\"/signup\">\n                  <Button size=\"lg\" className=\"bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white px-8 py-4 rounded-xl shadow-2xl hover:shadow-purple-500/25 transition-all duration-300 group\">\n                    Start Banking Today\n                    <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                  </Button>\n                </Link>\n                <Link href=\"/signin\">\n                  <Button size=\"lg\" variant=\"outline\" className=\"border-white/30 text-white hover:bg-white/10 hover:text-white px-8 py-4 rounded-xl backdrop-blur-sm transition-all duration-300\">\n                    Sign In\n                  </Button>\n                </Link>\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 sm:gap-8 pt-8 border-t border-white/20\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-white\">500K+</div>\n                  <div className=\"text-blue-200 text-sm\">Happy Customers</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-white\">$2.5B+</div>\n                  <div className=\"text-blue-200 text-sm\">Assets Secured</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-white\">99.9%</div>\n                  <div className=\"text-blue-200 text-sm\">Uptime</div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              {/* Modern Banking Dashboard Mockup */}\n              <div className=\"relative z-10 bg-white/10 backdrop-blur-xl rounded-3xl p-8 border border-white/20 shadow-2xl\">\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-white font-semibold text-lg\">Account Overview</h3>\n                    <div className=\"flex space-x-2\">\n                      <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl p-6\">\n                      <div className=\"text-white/80 text-sm\">Total Balance</div>\n                      <div className=\"text-white text-3xl font-bold\">$52,847.92</div>\n                      <div className=\"flex items-center space-x-2 text-green-300 text-sm mt-2\">\n                        <TrendingUp className=\"h-4 w-4\" />\n                        <span>+12.5% this month</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-white/10 rounded-xl p-4\">\n                        <div className=\"text-white/60 text-xs\">Checking</div>\n                        <div className=\"text-white font-semibold\">$12,450.00</div>\n                      </div>\n                      <div className=\"bg-white/10 rounded-xl p-4\">\n                        <div className=\"text-white/60 text-xs\">Savings</div>\n                        <div className=\"text-white font-semibold\">$40,397.92</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Floating Elements */}\n              <div className=\"absolute -top-4 -right-4 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-2xl p-4 shadow-xl animate-bounce\">\n                <CreditCard className=\"h-8 w-8 text-white\" />\n              </div>\n              <div className=\"absolute -bottom-4 -left-4 bg-gradient-to-r from-green-400 to-blue-500 rounded-2xl p-4 shadow-xl animate-pulse\">\n                <Smartphone className=\"h-8 w-8 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Advanced Features Section */}\n      <section className=\"py-24 bg-gradient-to-b from-gray-50 to-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n              Why 500,000+ Choose SPB\n            </h3>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Experience banking that adapts to your lifestyle with cutting-edge technology and personalized service.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Security Feature */}\n            <Card className=\"group hover:shadow-2xl transition-all duration-300 border-0 shadow-lg hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                  <Shield className=\"h-10 w-10\" />\n                </div>\n                <h4 className=\"text-2xl font-bold mb-4 text-gray-900\">Military-Grade Security</h4>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Advanced encryption, biometric authentication, and AI-powered fraud detection protect your assets 24/7.\n                </p>\n                <div className=\"mt-6 flex items-center justify-center space-x-4 text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Lock className=\"h-4 w-4\" />\n                    <span>256-bit SSL</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Eye className=\"h-4 w-4\" />\n                    <span>Biometric Auth</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Speed Feature */}\n            <Card className=\"group hover:shadow-2xl transition-all duration-300 border-0 shadow-lg hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"bg-gradient-to-br from-green-500 to-teal-600 text-white w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                  <Zap className=\"h-10 w-10\" />\n                </div>\n                <h4 className=\"text-2xl font-bold mb-4 text-gray-900\">Lightning Fast</h4>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Instant transfers, real-time notifications, and sub-second transaction processing worldwide.\n                </p>\n                <div className=\"mt-6 flex items-center justify-center space-x-4 text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>&lt;1 Second</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Globe className=\"h-4 w-4\" />\n                    <span>Global Network</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Support Feature */}\n            <Card className=\"group hover:shadow-2xl transition-all duration-300 border-0 shadow-lg hover:-translate-y-2\">\n              <CardContent className=\"p-8 text-center\">\n                <div className=\"bg-gradient-to-br from-purple-500 to-pink-600 text-white w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                  <HeadphonesIcon className=\"h-10 w-10\" />\n                </div>\n                <h4 className=\"text-2xl font-bold mb-4 text-gray-900\">24/7 Expert Support</h4>\n                <p className=\"text-gray-600 leading-relaxed\">\n                  Dedicated relationship managers and AI-powered assistance available around the clock.\n                </p>\n                <div className=\"mt-6 flex items-center justify-center space-x-4 text-sm text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Users className=\"h-4 w-4\" />\n                    <span>Human Experts</span>\n                  </div>\n                  <div className=\"flex items-center space-x-1\">\n                    <Award className=\"h-4 w-4\" />\n                    <span>Award Winning</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Customer Testimonials */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-900 via-purple-900 to-blue-900\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-4xl lg:text-5xl font-bold text-white mb-6\">\n              Loved by Customers Worldwide\n            </h3>\n            <div className=\"flex items-center justify-center space-x-1 mb-4\">\n              {[...Array(5)].map((_, i) => (\n                <Star key={i} className=\"h-6 w-6 text-yellow-400 fill-current\" />\n              ))}\n              <span className=\"text-white ml-2 text-lg\">4.9/5 from 50,000+ reviews</span>\n            </div>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto\">\n            <Card className=\"bg-white/10 backdrop-blur-xl border-white/20 text-white\">\n              <CardContent className=\"p-12 text-center\">\n                <div className=\"flex items-center justify-center space-x-1 mb-6\">\n                  {[...Array(testimonials[currentTestimonial].rating)].map((_, i) => (\n                    <Star key={i} className=\"h-5 w-5 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <blockquote className=\"text-2xl lg:text-3xl font-light leading-relaxed mb-8 italic\">\n                  \"{testimonials[currentTestimonial].content}\"\n                </blockquote>\n                <div>\n                  <div className=\"font-bold text-xl\">{testimonials[currentTestimonial].name}</div>\n                  <div className=\"text-blue-200\">{testimonials[currentTestimonial].role}</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"flex justify-center items-center space-x-4 mt-8\">\n              <button\n                className=\"p-2 bg-white/20 hover:bg-white/30 rounded-full transition-all duration-300\"\n                onClick={() => setCurrentTestimonial(currentTestimonial === 0 ? testimonials.length - 1 : currentTestimonial - 1)}\n              >\n                <ArrowRight className=\"h-4 w-4 text-white rotate-180\" />\n              </button>\n              <div className=\"flex space-x-2\">\n                {testimonials.map((_, index) => (\n                  <button\n                    key={index}\n                    className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                      index === currentTestimonial ? 'bg-white' : 'bg-white/30'\n                    }`}\n                    onClick={() => setCurrentTestimonial(index)}\n                  />\n                ))}\n              </div>\n              <button\n                className=\"p-2 bg-white/20 hover:bg-white/30 rounded-full transition-all duration-300\"\n                onClick={() => setCurrentTestimonial((currentTestimonial + 1) % testimonials.length)}\n              >\n                <ArrowRight className=\"h-4 w-4 text-white\" />\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Trust & Security Section */}\n      <section className=\"py-24 bg-white\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-4xl lg:text-5xl font-bold text-gray-900 mb-6\">\n              Trusted & Secure\n            </h3>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Bank with confidence knowing your money is protected by industry-leading security measures and regulatory compliance.\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-4 gap-8 items-center justify-center\">\n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-green-500 to-emerald-600 text-white p-4 rounded-2xl w-20 h-20 flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                <CheckCircle className=\"h-10 w-10\" />\n              </div>\n              <div className=\"font-bold text-lg text-gray-900\">FDIC Insured</div>\n              <div className=\"text-gray-600 text-sm\">Up to $250,000</div>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-cyan-600 text-white p-4 rounded-2xl w-20 h-20 flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                <Lock className=\"h-10 w-10\" />\n              </div>\n              <div className=\"font-bold text-lg text-gray-900\">256-bit SSL</div>\n              <div className=\"text-gray-600 text-sm\">Bank-level encryption</div>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-purple-500 to-violet-600 text-white p-4 rounded-2xl w-20 h-20 flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                <Award className=\"h-10 w-10\" />\n              </div>\n              <div className=\"font-bold text-lg text-gray-900\">ISO 27001</div>\n              <div className=\"text-gray-600 text-sm\">Certified secure</div>\n            </div>\n            \n            <div className=\"text-center group\">\n              <div className=\"bg-gradient-to-br from-orange-500 to-red-600 text-white p-4 rounded-2xl w-20 h-20 flex items-center justify-center mx-auto mb-4 shadow-xl group-hover:scale-110 transition-transform duration-300\">\n                <Shield className=\"h-10 w-10\" />\n              </div>\n              <div className=\"font-bold text-lg text-gray-900\">PCI DSS</div>\n              <div className=\"text-gray-600 text-sm\">Level 1 compliant</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action Section */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h3 className=\"text-4xl lg:text-5xl font-bold text-white mb-6\">\n            Ready to Transform Your Banking?\n          </h3>\n          <p className=\"text-xl text-blue-100 mb-12 max-w-2xl mx-auto\">\n            Join over 500,000 customers who've already made the switch to smarter, faster, more secure banking.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n            <Link href=\"/signup\">\n              <Button size=\"lg\" className=\"bg-white text-blue-600 hover:bg-gray-100 px-12 py-4 rounded-xl font-bold text-lg shadow-2xl hover:shadow-white/25 transition-all duration-300 group\">\n                Open Your Account\n                <ArrowRight className=\"ml-2 h-6 w-6 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n            </Link>\n            <div className=\"text-white/80 text-sm\">\n              ✓ No monthly fees  ✓ $0 minimum balance  ✓ Instant approval\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Modern Footer */}\n      <footer className=\"bg-gray-900 text-white py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid sm:grid-cols-2 lg:grid-cols-4 gap-8 mb-12\">\n            <div className=\"sm:col-span-2 lg:col-span-1\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white p-3 rounded-xl\">\n                  <Shield className=\"h-6 w-6\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold\">SPB</h3>\n                  <p className=\"text-gray-400 text-sm\">Secure Professional Bank</p>\n                </div>\n              </div>\n              <p className=\"text-gray-400 leading-relaxed\">\n                The future of banking is here. Experience next-generation financial services designed for the modern world.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Quick Links</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><Link href=\"/signup\" className=\"hover:text-white transition-colors\">Open Account</Link></li>\n                <li><Link href=\"/signin\" className=\"hover:text-white transition-colors\">Sign In</Link></li>\n                <li><a href=\"#support\" className=\"hover:text-white transition-colors\">24/7 Support</a></li>\n                <li><a href=\"#security\" className=\"hover:text-white transition-colors\">Security Center</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Legal</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li><span className=\"text-gray-500\">Privacy Policy</span></li>\n                <li><span className=\"text-gray-500\">Terms of Service</span></li>\n                <li><span className=\"text-gray-500\">FDIC Information</span></li>\n                <li><span className=\"text-gray-500\">Accessibility</span></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-bold text-lg mb-4\">Contact</h4>\n              <ul className=\"space-y-3 text-gray-400\">\n                <li>1-800-SPB-BANK</li>\n                <li>support@spb.com</li>\n                <li>24/7 Live Chat</li>\n                <li>Secure Messaging</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-800 pt-8 text-center\">\n            <p className=\"text-gray-400\">\n              © 2024 Secure Professional Bank. All rights reserved. FDIC Insured.\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":25693},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/signin.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Shield, Eye, EyeOff, ArrowRight, Mail, Lock, Sparkles } from \"lucide-react\";\nimport { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst signinSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n  rememberMe: z.boolean().optional(),\n});\n\ntype SigninForm = z.infer<typeof signinSchema>;\n\nexport default function SignIn() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { login, isLoginPending } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<SigninForm>({\n    resolver: zodResolver(signinSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  });\n\n  const onSubmit = async (data: SigninForm) => {\n    try {\n      await login(data);\n      toast({\n        title: \"Welcome Back!\",\n        description: \"You have been successfully signed in.\",\n      });\n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Sign In Failed\",\n        description: error instanceof Error ? error.message : \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute bottom-20 right-10 w-48 h-48 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full blur-xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-24 h-24 bg-gradient-to-br from-cyan-400/20 to-blue-400/20 rounded-full blur-xl animate-pulse delay-2000\"></div>\n      </div>\n\n      <div className=\"w-full max-w-6xl mx-auto grid lg:grid-cols-2 gap-12 items-center relative z-10\">\n        {/* Left Side - Branding */}\n        <div className=\"hidden lg:block space-y-8\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <div className=\"bg-gradient-to-br from-blue-600 via-purple-600 to-blue-800 text-white p-4 rounded-2xl shadow-2xl\">\n                  <Shield className=\"h-8 w-8\" />\n                </div>\n                <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse\"></div>\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                  Secure Professional Bank\n                </h1>\n                <p className=\"text-gray-600\">Your trusted banking partner</p>\n              </div>\n            </div>\n            \n            <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 leading-tight\">\n              Welcome Back to\n              <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent block\">\n                Next-Gen Banking\n              </span>\n            </h2>\n            \n            <p className=\"text-xl text-gray-600 leading-relaxed\">\n              Access your account with military-grade security and experience banking that adapts to your lifestyle.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-gradient-to-br from-green-500 to-emerald-600 p-2 rounded-lg\">\n                <Sparkles className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-gray-700 font-medium\">Bank-grade security & encryption</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-gradient-to-br from-blue-500 to-cyan-600 p-2 rounded-lg\">\n                <Sparkles className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-gray-700 font-medium\">Instant global transfers</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-gradient-to-br from-purple-500 to-pink-600 p-2 rounded-lg\">\n                <Sparkles className=\"h-5 w-5 text-white\" />\n              </div>\n              <span className=\"text-gray-700 font-medium\">24/7 expert support</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Login Form */}\n        <div className=\"w-full max-w-md mx-auto lg:mx-0\">\n          <Card className=\"bg-white/80 backdrop-blur-xl border-0 shadow-2xl rounded-3xl overflow-hidden\" data-testid=\"card-signin\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-white/40 via-white/20 to-white/10 pointer-events-none\"></div>\n            \n            <CardHeader className=\"text-center p-8 relative\">\n              <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white p-4 rounded-2xl w-fit mx-auto mb-6 shadow-xl\">\n                <Shield className=\"h-10 w-10\" />\n              </div>\n              <CardTitle className=\"text-3xl font-bold text-gray-900 mb-2\" data-testid=\"text-signin-title\">\n                Welcome Back\n              </CardTitle>\n              <CardDescription className=\"text-gray-600 text-lg\" data-testid=\"text-signin-subtitle\">\n                Sign in to your secure account\n              </CardDescription>\n            </CardHeader>\n            \n            <CardContent className=\"p-8 pt-0 relative\">\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-700 font-semibold\">Email Address</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                            <Input \n                              type=\"email\" \n                              placeholder=\"your.email@example.com\" \n                              className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                              data-testid=\"input-email\"\n                              {...field} \n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-gray-700 font-semibold\">Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                            <Input \n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"••••••••\" \n                              className=\"pl-12 pr-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                              data-testid=\"input-password\"\n                              {...field} \n                            />\n                            <button\n                              type=\"button\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                            >\n                              {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                            </button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <FormField\n                      control={form.control}\n                      name=\"rememberMe\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                          <FormControl>\n                            <Checkbox \n                              checked={field.value} \n                              onCheckedChange={field.onChange}\n                              className=\"data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                              data-testid=\"checkbox-rememberMe\"\n                            />\n                          </FormControl>\n                          <FormLabel className=\"text-gray-700 font-medium cursor-pointer\">\n                            Remember me\n                          </FormLabel>\n                        </FormItem>\n                      )}\n                    />\n                    <a href=\"#\" className=\"text-blue-600 hover:text-blue-700 font-medium hover:underline transition-colors\" data-testid=\"link-forgot-password\">\n                      Forgot password?\n                    </a>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 group\" \n                    disabled={isLoginPending}\n                    data-testid=\"button-signin\"\n                  >\n                    {isLoginPending ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                        <span>Signing In...</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <span>Sign In</span>\n                        <ArrowRight className=\"h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                      </div>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n              \n              <div className=\"mt-8 space-y-6\">\n                <div className=\"text-center\">\n                  <p className=\"text-gray-600\">\n                    Don't have an account?{\" \"}\n                    <Link href=\"/signup\" className=\"text-blue-600 hover:text-blue-700 font-semibold hover:underline transition-colors\" data-testid=\"link-signup\">\n                      Create Account\n                    </Link>\n                  </p>\n                </div>\n                \n                <div className=\"pt-6 border-t border-gray-200\">\n                  <Link href=\"/admin-login\" className=\"flex items-center justify-center space-x-2 text-gray-500 hover:text-gray-700 transition-colors group\" data-testid=\"link-admin-login\">\n                    <Shield className=\"h-4 w-4 group-hover:scale-110 transition-transform\" />\n                    <span className=\"text-sm font-medium\">Admin Access</span>\n                  </Link>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12564},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Shield, Eye, EyeOff, ArrowRight, Mail, Lock, User, Phone, MapPin, Calendar, Check } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst signupSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string(),\n  ssn: z.string().regex(/^\\d{3}-\\d{2}-\\d{4}$/, \"SSN must be in format XXX-XX-XXXX\"),\n  phone: z.string().min(10, \"Phone number is required\"),\n  streetAddress: z.string().min(1, \"Street address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  zipCode: z.string().regex(/^\\d{5}$/, \"ZIP code must be 5 digits\"),\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  agreeToTerms: z.boolean().refine(val => val, \"You must agree to the terms\"),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\nconst US_STATES = [\n  { value: \"AL\", label: \"Alabama\" },\n  { value: \"AK\", label: \"Alaska\" },\n  { value: \"AZ\", label: \"Arizona\" },\n  { value: \"AR\", label: \"Arkansas\" },\n  { value: \"CA\", label: \"California\" },\n  { value: \"CO\", label: \"Colorado\" },\n  { value: \"CT\", label: \"Connecticut\" },\n  { value: \"DE\", label: \"Delaware\" },\n  { value: \"FL\", label: \"Florida\" },\n  { value: \"GA\", label: \"Georgia\" },\n  { value: \"HI\", label: \"Hawaii\" },\n  { value: \"ID\", label: \"Idaho\" },\n  { value: \"IL\", label: \"Illinois\" },\n  { value: \"IN\", label: \"Indiana\" },\n  { value: \"IA\", label: \"Iowa\" },\n  { value: \"KS\", label: \"Kansas\" },\n  { value: \"KY\", label: \"Kentucky\" },\n  { value: \"LA\", label: \"Louisiana\" },\n  { value: \"ME\", label: \"Maine\" },\n  { value: \"MD\", label: \"Maryland\" },\n  { value: \"MA\", label: \"Massachusetts\" },\n  { value: \"MI\", label: \"Michigan\" },\n  { value: \"MN\", label: \"Minnesota\" },\n  { value: \"MS\", label: \"Mississippi\" },\n  { value: \"MO\", label: \"Missouri\" },\n  { value: \"MT\", label: \"Montana\" },\n  { value: \"NE\", label: \"Nebraska\" },\n  { value: \"NV\", label: \"Nevada\" },\n  { value: \"NH\", label: \"New Hampshire\" },\n  { value: \"NJ\", label: \"New Jersey\" },\n  { value: \"NM\", label: \"New Mexico\" },\n  { value: \"NY\", label: \"New York\" },\n  { value: \"NC\", label: \"North Carolina\" },\n  { value: \"ND\", label: \"North Dakota\" },\n  { value: \"OH\", label: \"Ohio\" },\n  { value: \"OK\", label: \"Oklahoma\" },\n  { value: \"OR\", label: \"Oregon\" },\n  { value: \"PA\", label: \"Pennsylvania\" },\n  { value: \"RI\", label: \"Rhode Island\" },\n  { value: \"SC\", label: \"South Carolina\" },\n  { value: \"SD\", label: \"South Dakota\" },\n  { value: \"TN\", label: \"Tennessee\" },\n  { value: \"TX\", label: \"Texas\" },\n  { value: \"UT\", label: \"Utah\" },\n  { value: \"VT\", label: \"Vermont\" },\n  { value: \"VA\", label: \"Virginia\" },\n  { value: \"WA\", label: \"Washington\" },\n  { value: \"WV\", label: \"West Virginia\" },\n  { value: \"WI\", label: \"Wisconsin\" },\n  { value: \"WY\", label: \"Wyoming\" }\n];\n\nexport default function SignUp() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n  const { register, isRegisterPending } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      ssn: \"\",\n      phone: \"\",\n      streetAddress: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      dateOfBirth: \"\",\n      agreeToTerms: false,\n    },\n  });\n\n  const onSubmit = async (data: SignupForm) => {\n    try {\n      const { confirmPassword, agreeToTerms, ...userData } = data;\n      \n      const formattedData = {\n        ...userData,\n        dateOfBirth: new Date(userData.dateOfBirth),\n      };\n\n      await register(formattedData);\n      \n      toast({\n        title: \"Account Created Successfully!\",\n        description: \"Please wait for admin approval to access all features.\",\n      });\n      \n      setLocation(\"/\");\n    } catch (error) {\n      toast({\n        title: \"Registration Failed\",\n        description: error instanceof Error ? error.message : \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const nextStep = () => {\n    if (currentStep < 3) setCurrentStep(currentStep + 1);\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) setCurrentStep(currentStep - 1);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50 flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background Elements */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute bottom-20 right-10 w-48 h-48 bg-gradient-to-br from-purple-400/20 to-pink-400/20 rounded-full blur-xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-24 h-24 bg-gradient-to-br from-cyan-400/20 to-blue-400/20 rounded-full blur-xl animate-pulse delay-2000\"></div>\n      </div>\n\n      <div className=\"w-full max-w-4xl mx-auto relative z-10\">\n        <Card className=\"bg-white/80 backdrop-blur-xl border-0 shadow-2xl rounded-3xl overflow-hidden\" data-testid=\"card-signup\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-white/40 via-white/20 to-white/10 pointer-events-none\"></div>\n          \n          <CardHeader className=\"text-center p-8 relative\">\n            <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white p-4 rounded-2xl w-fit mx-auto mb-6 shadow-xl\">\n              <Shield className=\"h-10 w-10\" />\n            </div>\n            <CardTitle className=\"text-4xl font-bold text-gray-900 mb-2\" data-testid=\"text-signup-title\">\n              Join SPB Today\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 text-lg\" data-testid=\"text-signup-subtitle\">\n              Experience the future of banking - secure, fast, and intelligent\n            </CardDescription>\n            \n            {/* Progress Steps */}\n            <div className=\"flex justify-center mt-8 space-x-4\">\n              {[1, 2, 3].map((step) => (\n                <div key={step} className=\"flex items-center\">\n                  <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold transition-all duration-300 ${\n                    step <= currentStep \n                      ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg' \n                      : 'bg-gray-200 text-gray-500'\n                  }`}>\n                    {step < currentStep ? <Check className=\"h-6 w-6\" /> : step}\n                  </div>\n                  {step < 3 && (\n                    <div className={`w-12 h-1 mx-2 rounded transition-all duration-300 ${\n                      step < currentStep ? 'bg-gradient-to-r from-blue-600 to-purple-600' : 'bg-gray-200'\n                    }`}></div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"p-8 pt-0 relative\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Step 1: Personal Information */}\n                {currentStep === 1 && (\n                  <div className=\"space-y-6\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Personal Information</h3>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">First Name</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  placeholder=\"John\" \n                                  className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-firstName\" \n                                  {...field} \n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">Last Name</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  placeholder=\"Doe\" \n                                  className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-lastName\" \n                                  {...field} \n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-700 font-semibold\">Email Address</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                              <Input \n                                type=\"email\" \n                                placeholder=\"john.doe@example.com\" \n                                className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                data-testid=\"input-email\" \n                                {...field} \n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"••••••••\" \n                                  className=\"pl-12 pr-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-password\" \n                                  {...field} \n                                />\n                                <button\n                                  type=\"button\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                                >\n                                  {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                                </button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">Confirm Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  placeholder=\"••••••••\" \n                                  className=\"pl-12 pr-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-confirmPassword\" \n                                  {...field} \n                                />\n                                <button\n                                  type=\"button\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                                >\n                                  {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                                </button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"dateOfBirth\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-700 font-semibold\">Date of Birth</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                              <Input \n                                type=\"date\" \n                                className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                data-testid=\"input-dateOfBirth\" \n                                {...field} \n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Step 2: Contact & Address */}\n                {currentStep === 2 && (\n                  <div className=\"space-y-6\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Contact & Address Information</h3>\n                    \n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">Phone Number</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  type=\"tel\" \n                                  placeholder=\"+1 (555) 123-4567\" \n                                  className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-phone\" \n                                  {...field} \n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"ssn\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">Social Security Number</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Shield className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                                <Input \n                                  placeholder=\"123-45-6789\" \n                                  className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                  data-testid=\"input-ssn\" \n                                  {...field} \n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                            <p className=\"text-xs text-gray-500\">Format: XXX-XX-XXXX</p>\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"streetAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel className=\"text-gray-700 font-semibold\">Street Address</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                              <Input \n                                placeholder=\"123 Main Street\" \n                                className=\"pl-12 h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                data-testid=\"input-streetAddress\" \n                                {...field} \n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"grid md:grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"city\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">City</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"New York\" \n                                className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                data-testid=\"input-city\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"state\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">State</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\" data-testid=\"select-state\">\n                                  <SelectValue placeholder=\"Select State\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {US_STATES.map((state) => (\n                                  <SelectItem key={state.value} value={state.value}>\n                                    {state.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"zipCode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-gray-700 font-semibold\">ZIP Code</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"10001\" \n                                className=\"h-12 border-gray-200 focus:border-blue-500 focus:ring-blue-500 rounded-xl bg-white/50\"\n                                data-testid=\"input-zipCode\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 3: Terms & Submit */}\n                {currentStep === 3 && (\n                  <div className=\"space-y-6\">\n                    <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Final Step</h3>\n                    \n                    <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-2xl p-6\">\n                      <h4 className=\"font-semibold text-gray-900 mb-3\">Account Security Features</h4>\n                      <div className=\"space-y-2 text-sm text-gray-600\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span>256-bit bank-level encryption</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span>Two-factor authentication</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span>Real-time fraud monitoring</span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Check className=\"h-4 w-4 text-green-500\" />\n                          <span>FDIC insured up to $250,000</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"agreeToTerms\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 p-4 bg-white/50 rounded-xl border border-gray-200\">\n                          <FormControl>\n                            <Checkbox \n                              checked={field.value} \n                              onCheckedChange={field.onChange}\n                              className=\"data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n                              data-testid=\"checkbox-agreeToTerms\"\n                            />\n                          </FormControl>\n                          <div className=\"space-y-1 leading-none\">\n                            <FormLabel className=\"text-gray-700 font-medium cursor-pointer\">\n                              I agree to the{\" \"}\n                              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700 underline\">Terms of Service</a>\n                              {\" \"}and{\" \"}\n                              <a href=\"#\" className=\"text-blue-600 hover:text-blue-700 underline\">Privacy Policy</a>\n                            </FormLabel>\n                            <FormMessage />\n                          </div>\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                )}\n\n                {/* Navigation Buttons */}\n                <div className=\"flex justify-between pt-6\">\n                  {currentStep > 1 ? (\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={prevStep}\n                      className=\"px-8 py-3 rounded-xl border-gray-300 hover:bg-gray-50\"\n                    >\n                      Previous\n                    </Button>\n                  ) : (\n                    <div></div>\n                  )}\n                  \n                  {currentStep < 3 ? (\n                    <Button \n                      type=\"button\" \n                      onClick={nextStep}\n                      className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 group\"\n                    >\n                      <span>Next Step</span>\n                      <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                    </Button>\n                  ) : (\n                    <Button \n                      type=\"submit\" \n                      className=\"px-8 py-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 group\" \n                      disabled={isRegisterPending}\n                      data-testid=\"button-create-account\"\n                    >\n                      {isRegisterPending ? (\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\"></div>\n                          <span>Creating Account...</span>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center space-x-2\">\n                          <span>Create Account</span>\n                          <ArrowRight className=\"h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n                        </div>\n                      )}\n                    </Button>\n                  )}\n                </div>\n              </form>\n            </Form>\n            \n            <div className=\"mt-8 text-center\">\n              <p className=\"text-gray-600\">\n                Already have an account?{\" \"}\n                <Link href=\"/signin\" className=\"text-blue-600 hover:text-blue-700 font-semibold hover:underline transition-colors\" data-testid=\"link-signin\">\n                  Sign In\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":29773},"client/src/pages/user-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  Shield, \n  Menu, \n  Clock, \n  CheckCircle, \n  Lock, \n  Wallet, \n  CreditCard, \n  MessageCircle, \n  Headphones, \n  LogOut, \n  RefreshCw,\n  TrendingUp,\n  DollarSign,\n  ArrowUpRight,\n  ArrowDownRight,\n  Star,\n  Award,\n  Calendar,\n  PieChart,\n  BarChart3,\n  Globe,\n  Send,\n  Eye,\n  Settings,\n  Bell,\n  Zap\n} from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport UserSidebar from \"@/components/user-sidebar\";\nimport MessageChat from \"@/components/message-chat\";\n\ntype Section = \"overview\" | \"accounts\" | \"transactions\" | \"loans\" | \"messages\" | \"support\";\n\nexport default function UserDashboard() {\n  const [activeSection, setActiveSection] = useState<Section>(\"overview\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { user, logout, isApproved } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const refreshStatus = () => {\n    toast({\n      title: \"Status Refreshed\",\n      description: isApproved ? \"Your account is approved!\" : \"Still pending approval.\",\n    });\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"overview\":\n        return <OverviewSection user={user} isApproved={isApproved} onRefresh={refreshStatus} onShowMessages={() => setActiveSection(\"messages\")} />;\n      case \"accounts\":\n        return <AccountsSection isApproved={isApproved} onShowMessages={() => setActiveSection(\"messages\")} />;\n      case \"transactions\":\n        return <TransactionsSection isApproved={isApproved} />;\n      case \"loans\":\n        return <LoansSection isApproved={isApproved} />;\n      case \"messages\":\n        return <MessageChat />;\n      case \"support\":\n        return <SupportSection />;\n      default:\n        return <OverviewSection user={user} isApproved={isApproved} onRefresh={refreshStatus} onShowMessages={() => setActiveSection(\"messages\")} />;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-purple-50\">\n      <UserSidebar \n        activeSection={activeSection}\n        onSectionChange={setActiveSection}\n        isOpen={sidebarOpen}\n        onToggle={() => setSidebarOpen(!sidebarOpen)}\n        onLogout={handleLogout}\n        isApproved={isApproved}\n      />\n      \n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white/80 backdrop-blur-lg border-b border-white/20 shadow-sm p-4 md:p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                data-testid=\"button-toggle-sidebar\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-dashboard-title\">\n                  Welcome back, <span data-testid=\"text-user-firstName\">{user?.firstName}</span>!\n                </h1>\n                <p className=\"text-gray-600\">\n                  {new Date().toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"h-5 w-5\" />\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full\"></div>\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\">\n                <Settings className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"flex items-center space-x-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-3 py-2 rounded-xl\">\n                <div className=\"w-8 h-8 bg-white/20 rounded-full flex items-center justify-center\">\n                  <span className=\"text-sm font-semibold\" data-testid=\"text-user-initials\">\n                    {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                  </span>\n                </div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-user-fullName\">{user?.firstName} {user?.lastName}</span>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Content Area */}\n        <main className=\"flex-1 overflow-auto p-4 md:p-6\">\n          {renderContent()}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction OverviewSection({ user, isApproved, onRefresh, onShowMessages }: any) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Status Cards Row */}\n      <div className=\"grid lg:grid-cols-4 md:grid-cols-2 gap-6\">\n        {/* Account Status */}\n        <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl hover:shadow-2xl transition-all duration-300\" data-testid=\"card-account-status\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-gray-600 text-sm font-medium\">Account Status</p>\n                <div className=\"flex items-center space-x-2 mt-2\">\n                  <div className={`p-1 rounded-full ${isApproved ? 'bg-green-100' : 'bg-amber-100'}`}>\n                    {isApproved ? (\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    ) : (\n                      <Clock className=\"h-4 w-4 text-amber-600\" />\n                    )}\n                  </div>\n                  <span className={`font-semibold ${isApproved ? 'text-green-600' : 'text-amber-600'}`} data-testid=\"text-approval-status\">\n                    {isApproved ? \"Approved\" : \"Pending\"}\n                  </span>\n                </div>\n              </div>\n              <Button size=\"sm\" onClick={onRefresh} variant=\"ghost\" className=\"hover:bg-white/50\" data-testid=\"button-refresh-status\">\n                <RefreshCw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Balance Card */}\n        <Card className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm font-medium\">Total Balance</p>\n                <p className=\"text-3xl font-bold mt-1\">\n                  {isApproved ? \"$0.00\" : \"---\"}\n                </p>\n              </div>\n              <div className=\"bg-white/20 p-3 rounded-xl\">\n                <Wallet className=\"h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Transactions Card */}\n        <Card className=\"bg-gradient-to-br from-green-500 to-emerald-600 text-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm font-medium\">This Month</p>\n                <p className=\"text-3xl font-bold mt-1\">\n                  {isApproved ? \"0\" : \"---\"}\n                </p>\n                <p className=\"text-green-100 text-xs\">Transactions</p>\n              </div>\n              <div className=\"bg-white/20 p-3 rounded-xl\">\n                <TrendingUp className=\"h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Messages Card */}\n        <Card className=\"bg-gradient-to-br from-purple-500 to-pink-600 text-white border-0 shadow-xl hover:shadow-2xl transition-all duration-300\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm font-medium\">Messages</p>\n                <p className=\"text-3xl font-bold mt-1\">0</p>\n                <p className=\"text-purple-100 text-xs\">Unread</p>\n              </div>\n              <Button size=\"sm\" onClick={onShowMessages} className=\"bg-white/20 hover:bg-white/30 border-0\" data-testid=\"button-check-messages\">\n                <MessageCircle className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Account Overview */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Status Banner */}\n          <Card className={`border-0 shadow-xl ${isApproved ? 'bg-gradient-to-r from-green-50 to-emerald-50' : 'bg-gradient-to-r from-amber-50 to-orange-50'}`}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className={`p-4 rounded-2xl ${isApproved ? 'bg-green-100' : 'bg-amber-100'}`}>\n                    {isApproved ? (\n                      <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                    ) : (\n                      <Clock className=\"h-8 w-8 text-amber-600\" />\n                    )}\n                  </div>\n                  <div>\n                    <h3 className={`text-xl font-bold ${isApproved ? 'text-green-900' : 'text-amber-900'}`}>\n                      {isApproved ? \"Account Fully Activated!\" : \"Account Under Review\"}\n                    </h3>\n                    <p className={`${isApproved ? 'text-green-700' : 'text-amber-700'}`}>\n                      {isApproved \n                        ? \"You now have access to all banking features\" \n                        : \"We're verifying your information. This usually takes 1-2 business days.\"\n                      }\n                    </p>\n                  </div>\n                </div>\n                <Button \n                  onClick={onShowMessages}\n                  className={`${isApproved ? 'bg-green-600 hover:bg-green-700' : 'bg-amber-600 hover:bg-amber-700'} text-white`}\n                  data-testid=\"button-contact-admin\"\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Contact Support\n                </Button>\n              </div>\n              \n              {!isApproved && (\n                <div className=\"mt-6 space-y-3\">\n                  <h4 className=\"font-semibold text-amber-900\">Verification Progress</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-3\">\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                      <span className=\"text-amber-800\">Application submitted</span>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-5 h-5 border-2 border-amber-500 rounded-full animate-pulse\"></div>\n                      <span className=\"text-amber-800\">Document verification in progress</span>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-5 h-5 border-2 border-gray-300 rounded-full\"></div>\n                      <span className=\"text-gray-600\">Final approval pending</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-quick-actions\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Zap className=\"h-5 w-5 text-blue-600\" />\n                <span>Quick Actions</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <Button \n                  className=\"h-20 bg-gradient-to-br from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-xl shadow-lg group\"\n                  disabled={!isApproved}\n                  data-testid=\"button-send-money\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Send className=\"h-6 w-6 group-hover:scale-110 transition-transform\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Send Money</div>\n                      <div className=\"text-xs opacity-90\">Transfer funds</div>\n                    </div>\n                  </div>\n                </Button>\n                \n                <Button \n                  className=\"h-20 bg-gradient-to-br from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white rounded-xl shadow-lg group\"\n                  disabled={!isApproved}\n                  data-testid=\"button-pay-bills\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <CreditCard className=\"h-6 w-6 group-hover:scale-110 transition-transform\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Pay Bills</div>\n                      <div className=\"text-xs opacity-90\">Manage payments</div>\n                    </div>\n                  </div>\n                </Button>\n                \n                <Button \n                  className=\"h-20 bg-gradient-to-br from-purple-500 to-purple-600 hover:from-purple-600 hover:to-purple-700 text-white rounded-xl shadow-lg group\"\n                  disabled={!isApproved}\n                  data-testid=\"button-view-reports\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <BarChart3 className=\"h-6 w-6 group-hover:scale-110 transition-transform\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">View Reports</div>\n                      <div className=\"text-xs opacity-90\">Financial insights</div>\n                    </div>\n                  </div>\n                </Button>\n                \n                <Button \n                  className=\"h-20 bg-gradient-to-br from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white rounded-xl shadow-lg group\"\n                  disabled={!isApproved}\n                  data-testid=\"button-apply-loan\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Award className=\"h-6 w-6 group-hover:scale-110 transition-transform\" />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">Apply for Loan</div>\n                      <div className=\"text-xs opacity-90\">Get financing</div>\n                    </div>\n                  </div>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar Content */}\n        <div className=\"space-y-6\">\n          {/* User Profile Card */}\n          <Card className=\"bg-gradient-to-br from-gray-900 to-gray-800 text-white border-0 shadow-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-xl font-bold\">\n                    {user?.firstName?.charAt(0)}{user?.lastName?.charAt(0)}\n                  </span>\n                </div>\n                <h3 className=\"font-bold text-lg\">{user?.firstName} {user?.lastName}</h3>\n                <p className=\"text-gray-300 text-sm\">{user?.email}</p>\n                <div className=\"mt-4 flex items-center justify-center space-x-2\">\n                  <Badge variant={isApproved ? \"default\" : \"secondary\"} className=\"bg-white/20\">\n                    {isApproved ? \"Verified\" : \"Pending\"}\n                  </Badge>\n                  <div className=\"flex space-x-1\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"h-3 w-3 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {isApproved ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Clock className=\"h-8 w-8 mx-auto mb-2\" />\n                    <p className=\"text-sm\">No recent activity</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-3 p-3 bg-amber-50 rounded-lg\">\n                      <Clock className=\"h-5 w-5 text-amber-600\" />\n                      <div className=\"text-sm\">\n                        <p className=\"font-medium text-amber-900\">Account verification in progress</p>\n                        <p className=\"text-amber-700\">Expected completion: 1-2 business days</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Support Card */}\n          <Card className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white border-0 shadow-xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <div className=\"bg-white/20 p-3 rounded-full w-fit mx-auto mb-4\">\n                  <Headphones className=\"h-6 w-6\" />\n                </div>\n                <h3 className=\"font-bold mb-2\">Need Help?</h3>\n                <p className=\"text-blue-100 text-sm mb-4\">\n                  Our support team is available 24/7 to assist you.\n                </p>\n                <Button \n                  onClick={onShowMessages}\n                  className=\"bg-white text-blue-600 hover:bg-gray-100 w-full\"\n                  data-testid=\"button-get-support\"\n                >\n                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                  Start Chat\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction AccountsSection({ isApproved, onShowMessages }: any) {\n  if (!isApproved) {\n    return (\n      <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-accounts-locked\">\n        <CardContent className=\"p-12\">\n          <div className=\"text-center\">\n            <div className=\"bg-amber-100 p-6 rounded-full w-fit mx-auto mb-6\">\n              <Lock className=\"h-12 w-12 text-amber-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\" data-testid=\"text-access-pending\">Accounts Locked</h3>\n            <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n              Your account features will be unlocked once your application is approved by our team.\n            </p>\n            <Button onClick={onShowMessages} className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white\" data-testid=\"button-contact-support\">\n              <MessageCircle className=\"h-4 w-4 mr-2\" />\n              Contact Support\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"card-accounts-approved\">\n      <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">Your Accounts</CardTitle>\n          <CardDescription>Manage your banking accounts and view balances</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl border border-blue-100\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white p-4 rounded-2xl\">\n                  <Wallet className=\"h-8 w-8\" />\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-bold text-gray-900\">Primary Checking</h4>\n                  <p className=\"text-gray-600\">Account #: ****1234</p>\n                  <Badge className=\"mt-1 bg-green-100 text-green-800\">Active</Badge>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-3xl font-bold text-gray-900\">$0.00</p>\n                <p className=\"text-gray-600\">Available Balance</p>\n                <Button size=\"sm\" className=\"mt-2\" variant=\"outline\">\n                  <Eye className=\"h-4 w-4 mr-2\" />\n                  View Details\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction TransactionsSection({ isApproved }: any) {\n  if (!isApproved) {\n    return (\n      <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-transactions-locked\">\n        <CardContent className=\"p-12\">\n          <div className=\"text-center\">\n            <div className=\"bg-amber-100 p-6 rounded-full w-fit mx-auto mb-6\">\n              <Lock className=\"h-12 w-12 text-amber-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\" data-testid=\"text-transactions-locked\">Transactions Locked</h3>\n            <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n              Transaction features will be enabled once your account is approved.\n            </p>\n            <div className=\"bg-amber-50 border border-amber-200 rounded-2xl p-6 max-w-md mx-auto mb-6\">\n              <h4 className=\"font-semibold text-amber-900 mb-3\">Coming Soon:</h4>\n              <ul className=\"text-amber-800 text-sm space-y-2 text-left\">\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span>Send and receive money</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span>View transaction history</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span>Set up recurring payments</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <span>Transfer between accounts</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-transactions-approved\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Transaction History</CardTitle>\n        <CardDescription>Track all your financial activities</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center py-16 text-gray-500\">\n          <div className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white p-6 rounded-full w-fit mx-auto mb-4\">\n            <CreditCard className=\"h-12 w-12\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Transactions Yet</h3>\n          <p className=\"text-gray-600\">Your transaction history will appear here once you start banking with us.</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction LoansSection({ isApproved }: any) {\n  if (!isApproved) {\n    return (\n      <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-loans-locked\">\n        <CardContent className=\"p-12\">\n          <div className=\"text-center\">\n            <div className=\"bg-amber-100 p-6 rounded-full w-fit mx-auto mb-6\">\n              <Lock className=\"h-12 w-12 text-amber-600\" />\n            </div>\n            <h3 className=\"text-2xl font-bold text-gray-900 mb-4\" data-testid=\"text-loan-services-locked\">Loan Services Locked</h3>\n            <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n              Loan application features will be available once your account is approved.\n            </p>\n            <div className=\"bg-amber-50 border border-amber-200 rounded-2xl p-6 max-w-md mx-auto mb-6\">\n              <h4 className=\"font-semibold text-amber-900 mb-3\">Available After Approval:</h4>\n              <ul className=\"text-amber-800 text-sm space-y-2 text-left\">\n                <li className=\"flex items-center space-x-2\">\n                  <Award className=\"h-4 w-4\" />\n                  <span>Personal loans</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <Award className=\"h-4 w-4\" />\n                  <span>Auto loans</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <Award className=\"h-4 w-4\" />\n                  <span>Home mortgages</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <Award className=\"h-4 w-4\" />\n                  <span>Business loans</span>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-loans-approved\">\n      <CardHeader>\n        <CardTitle className=\"text-2xl\">Loan Services</CardTitle>\n        <CardDescription>Apply for loans and manage your applications</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center py-16 text-gray-500\">\n          <div className=\"bg-gradient-to-br from-green-500 to-emerald-600 text-white p-6 rounded-full w-fit mx-auto mb-4\">\n            <Award className=\"h-12 w-12\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Ready to Apply?</h3>\n          <p className=\"text-gray-600 mb-6\">Explore our loan options and find the perfect fit for your needs.</p>\n          <Button className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white\">\n            <Award className=\"h-4 w-4 mr-2\" />\n            View Loan Options\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction SupportSection() {\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white border-0 shadow-xl\" data-testid=\"card-contact-support\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\">24/7 Support Center</CardTitle>\n          <CardDescription className=\"text-blue-100\">\n            We're here to help you with all your banking needs\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <MessageCircle className=\"h-6 w-6\" />\n                <span className=\"font-semibold\">Live Chat Support</span>\n              </div>\n              <p className=\"text-blue-100 text-sm\">\n                Get instant help from our support team available 24/7.\n              </p>\n              <Button className=\"bg-white text-blue-600 hover:bg-gray-100\">\n                Start Chat\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Headphones className=\"h-6 w-6\" />\n                <span className=\"font-semibold\">Phone Support</span>\n              </div>\n              <p className=\"text-blue-100 text-sm\">\n                Call us anytime for personalized assistance.\n              </p>\n              <Button className=\"bg-white text-blue-600 hover:bg-gray-100\">\n                Call Now\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"bg-white/60 backdrop-blur-lg border-0 shadow-xl\" data-testid=\"card-faq\">\n        <CardHeader>\n          <CardTitle>Frequently Asked Questions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">How long does account approval take?</h4>\n              <p className=\"text-gray-600 text-sm\">\n                Most accounts are approved within 1-2 business days after document verification.\n              </p>\n            </div>\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">What documents do I need?</h4>\n              <p className=\"text-gray-600 text-sm\">\n                You'll need a government-issued ID, proof of address, and social security number.\n              </p>\n            </div>\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Is my money insured?</h4>\n              <p className=\"text-gray-600 text-sm\">\n                Yes, all deposits are FDIC insured up to $250,000 per account.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":30580},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth/admin-login.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { adminLoginSchema, type AdminLogin } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ShieldCheck, ArrowLeft } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<AdminLogin>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const adminLoginMutation = useMutation({\n    mutationFn: async (adminData: AdminLogin) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/admin-login\", adminData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Admin Access Granted\",\n        description: \"Welcome to the admin dashboard.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Admin Login Failed\",\n        description: error.message || \"Invalid admin credentials.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AdminLogin) => {\n    adminLoginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-admin-login\">\n        <CardHeader className=\"text-center\">\n          <div className=\"bg-red-600 text-white p-3 rounded-full w-fit mx-auto mb-4\">\n            <ShieldCheck className=\"text-2xl\" />\n          </div>\n          <CardTitle className=\"text-3xl text-gray-900\" data-testid=\"text-admin-login-title\">\n            Admin Access\n          </CardTitle>\n          <p className=\"text-muted-foreground\" data-testid=\"text-admin-login-subtitle\">\n            Secure administrative login\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                {...form.register(\"username\")}\n                placeholder=\"Admin Username\"\n                data-testid=\"input-username\"\n              />\n              {form.formState.errors.username && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.username.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"admin@domain.com\"\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                placeholder=\"••••••••\"\n                data-testid=\"input-password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-red-600 hover:bg-red-700\"\n              disabled={adminLoginMutation.isPending}\n              data-testid=\"button-admin-login\"\n            >\n              {adminLoginMutation.isPending ? \"Logging In...\" : \"Admin Login\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"link\"\n              onClick={() => setLocation(\"/sign-in\")}\n              className=\"text-sm text-muted-foreground hover:text-primary\"\n              data-testid=\"button-back-to-login\"\n            >\n              <ArrowLeft className=\"mr-1 h-4 w-4\" />\n              Back to User Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4752},"client/src/pages/auth/sign-in.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { loginSchema, type LoginUser } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { University, Settings } from \"lucide-react\";\n\nexport default function SignIn() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\"\n    }\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (userData: LoginUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Welcome Back!\",\n        description: \"Successfully signed in to your account.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Sign In Failed\",\n        description: error.message || \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginUser) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-muted flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-sign-in\">\n        <CardHeader className=\"text-center\">\n          <div className=\"bg-primary text-primary-foreground p-3 rounded-full w-fit mx-auto mb-4\">\n            <University className=\"text-2xl\" />\n          </div>\n          <CardTitle className=\"text-3xl text-primary\" data-testid=\"text-sign-in-title\">\n            Welcome Back\n          </CardTitle>\n          <p className=\"text-muted-foreground\" data-testid=\"text-sign-in-subtitle\">\n            Sign in to your account\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"your.email@example.com\"\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                placeholder=\"••••••••\"\n                data-testid=\"input-password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox id=\"remember\" data-testid=\"checkbox-remember\" />\n                <Label htmlFor=\"remember\" className=\"text-sm\">Remember me</Label>\n              </div>\n              <Button variant=\"link\" className=\"p-0\" data-testid=\"button-forgot-password\">\n                Forgot password?\n              </Button>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-sign-in\"\n            >\n              {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-muted-foreground\">\n              Don't have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                onClick={() => setLocation(\"/sign-up\")}\n                className=\"p-0\"\n                data-testid=\"button-create-account\"\n              >\n                Create Account\n              </Button>\n            </p>\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <Button\n                variant=\"link\"\n                onClick={() => setLocation(\"/admin-login\")}\n                className=\"text-sm text-muted-foreground hover:text-primary\"\n                data-testid=\"button-admin-login\"\n              >\n                <Settings className=\"mr-1 h-4 w-4\" />\n                Admin Login\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5189},"client/src/pages/auth/sign-up.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { University } from \"lucide-react\";\n\nexport default function SignUp() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      phoneNumber: \"\",\n      ssn: \"\",\n      streetAddress: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      dateOfBirth: new Date()\n    }\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Account Created Successfully!\",\n        description: \"Please wait for admin approval to access all features.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    registerMutation.mutate(data);\n  };\n\n  const states = [\n    { value: \"AL\", label: \"Alabama\" },\n    { value: \"CA\", label: \"California\" },\n    { value: \"FL\", label: \"Florida\" },\n    { value: \"NY\", label: \"New York\" },\n    { value: \"TX\", label: \"Texas\" },\n    // Add more states as needed\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-muted flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\" data-testid=\"card-sign-up\">\n        <CardHeader className=\"text-center\">\n          <div className=\"bg-primary text-primary-foreground p-3 rounded-full w-fit mx-auto mb-4\">\n            <University className=\"text-2xl\" />\n          </div>\n          <CardTitle className=\"text-3xl text-primary\" data-testid=\"text-sign-up-title\">\n            Create Your Account\n          </CardTitle>\n          <p className=\"text-muted-foreground\" data-testid=\"text-sign-up-subtitle\">\n            Join Secure Professional Bank today\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">First Name *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"John\"\n                  data-testid=\"input-first-name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.firstName.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"lastName\">Last Name *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Doe\"\n                  data-testid=\"input-last-name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.lastName.message}</p>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"email\">Email Address *</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...form.register(\"email\")}\n                placeholder=\"john.doe@example.com\"\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\">Password *</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                {...form.register(\"password\")}\n                placeholder=\"••••••••\"\n                data-testid=\"input-password\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"ssn\">Social Security Number (SSN) *</Label>\n              <Input\n                id=\"ssn\"\n                {...form.register(\"ssn\")}\n                placeholder=\"123-45-6789\"\n                pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{4}\"\n                data-testid=\"input-ssn\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">Format: XXX-XX-XXXX</p>\n              {form.formState.errors.ssn && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.ssn.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phoneNumber\">Phone Number *</Label>\n              <Input\n                id=\"phoneNumber\"\n                type=\"tel\"\n                {...form.register(\"phoneNumber\")}\n                placeholder=\"+1 (555) 123-4567\"\n                data-testid=\"input-phone\"\n              />\n              {form.formState.errors.phoneNumber && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.phoneNumber.message}</p>\n              )}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"streetAddress\">Street Address *</Label>\n              <Input\n                id=\"streetAddress\"\n                {...form.register(\"streetAddress\")}\n                placeholder=\"123 Main Street\"\n                data-testid=\"input-address\"\n              />\n              {form.formState.errors.streetAddress && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.streetAddress.message}</p>\n              )}\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"city\">City *</Label>\n                <Input\n                  id=\"city\"\n                  {...form.register(\"city\")}\n                  placeholder=\"New York\"\n                  data-testid=\"input-city\"\n                />\n                {form.formState.errors.city && (\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.city.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"state\">State *</Label>\n                <Select onValueChange={(value) => form.setValue(\"state\", value)}>\n                  <SelectTrigger data-testid=\"select-state\">\n                    <SelectValue placeholder=\"Select State\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {states.map((state) => (\n                      <SelectItem key={state.value} value={state.value}>\n                        {state.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.state && (\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.state.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"zipCode\">ZIP Code *</Label>\n                <Input\n                  id=\"zipCode\"\n                  {...form.register(\"zipCode\")}\n                  placeholder=\"10001\"\n                  pattern=\"[0-9]{5}\"\n                  data-testid=\"input-zip\"\n                />\n                {form.formState.errors.zipCode && (\n                  <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.zipCode.message}</p>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n              <Input\n                id=\"dateOfBirth\"\n                type=\"date\"\n                {...form.register(\"dateOfBirth\", { \n                  setValueAs: (value) => new Date(value) \n                })}\n                data-testid=\"input-date-of-birth\"\n              />\n              {form.formState.errors.dateOfBirth && (\n                <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.dateOfBirth.message}</p>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox id=\"terms\" required data-testid=\"checkbox-terms\" />\n              <Label htmlFor=\"terms\" className=\"text-sm\">\n                I agree to the <a href=\"#\" className=\"text-primary hover:underline\">Terms of Service</a> and{\" \"}\n                <a href=\"#\" className=\"text-primary hover:underline\">Privacy Policy</a>\n              </Label>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\"\n              disabled={registerMutation.isPending}\n              data-testid=\"button-create-account\"\n            >\n              {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-muted-foreground\">\n              Already have an account?{\" \"}\n              <Button\n                variant=\"link\"\n                onClick={() => setLocation(\"/sign-in\")}\n                className=\"p-0\"\n                data-testid=\"button-go-sign-in\"\n              >\n                Sign In\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10531},"client/src/pages/dashboard/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  ShieldCheck,\n  PieChart,\n  Users,\n  CheckCircle,\n  MessageCircle,\n  ArrowLeftRight,\n  Shield,\n  Settings,\n  LogOut,\n  Menu,\n  UserPlus,\n  Check,\n  X,\n  Eye,\n  Send,\n  Clock,\n  TrendingUp,\n  DollarSign,\n  AlertTriangle\n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function AdminDashboard() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { socket, sendMessage: sendWebSocketMessage } = useWebSocket();\n\n  // Queries\n  const { data: allUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const { data: pendingUsers = [] } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const { data: conversations = [] } = useQuery({\n    queryKey: [\"/api/admin/conversations\"],\n    enabled: user?.role === \"admin\",\n  });\n\n  const { data: messages = [] } = useQuery({\n    queryKey: [\"/api/messages\", selectedConversation],\n    enabled: !!selectedConversation,\n  });\n\n  // Mutations\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/approve-user/${userId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n      toast({\n        title: \"User Approved\",\n        description: \"User account has been successfully approved.\",\n      });\n    }\n  });\n\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await apiRequest(\"POST\", `/api/admin/reject-user/${userId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n      toast({\n        title: \"User Rejected\",\n        description: \"User account has been rejected.\",\n      });\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async ({ receiverId, content }: { receiverId: string; content: string }) => {\n      if (socket) {\n        sendWebSocketMessage({\n          type: 'send_message',\n          senderId: 'admin',\n          receiverId,\n          content,\n          isFromAdmin: true\n        });\n      }\n      return content;\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      if (selectedConversation) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/messages\", selectedConversation] });\n      }\n    }\n  });\n\n  const handleApproveUser = (userId: string) => {\n    approveUserMutation.mutate(userId);\n  };\n\n  const handleRejectUser = (userId: string) => {\n    if (confirm(\"Are you sure you want to reject this user?\")) {\n      rejectUserMutation.mutate(userId);\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (messageInput.trim() && selectedConversation) {\n      sendMessageMutation.mutate({\n        receiverId: selectedConversation,\n        content: messageInput.trim()\n      });\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  if (user?.role !== \"admin\") {\n    return <div>Access denied</div>;\n  }\n\n  const totalUsers = allUsers.length;\n  const pendingCount = pendingUsers.length;\n  const approvedUsers = allUsers.filter((u: User) => u.status === \"approved\").length;\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Admin Sidebar */}\n      <aside \n        className={`bg-gray-900 text-white w-64 transition-transform duration-300 ${\n          sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n        } md:translate-x-0 fixed md:relative z-30 h-full`}\n      >\n        <div className=\"p-6 border-b border-gray-700\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"bg-red-600 p-2 rounded\">\n              <ShieldCheck />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-admin-panel\">SPB Admin Panel</h3>\n              <p className=\"text-xs text-gray-400\">Administrative Control</p>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"p-4 space-y-2\">\n          <Button\n            variant={activeSection === \"dashboard\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => setActiveSection(\"dashboard\")}\n            data-testid=\"button-nav-dashboard\"\n          >\n            <PieChart className=\"mr-3 h-4 w-4\" />\n            Dashboard\n          </Button>\n          \n          <Button\n            variant={activeSection === \"users\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => setActiveSection(\"users\")}\n            data-testid=\"button-nav-users\"\n          >\n            <Users className=\"mr-3 h-4 w-4\" />\n            User Management\n            {totalUsers > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-auto text-xs\">\n                {totalUsers}\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"approvals\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => setActiveSection(\"approvals\")}\n            data-testid=\"button-nav-approvals\"\n          >\n            <CheckCircle className=\"mr-3 h-4 w-4\" />\n            Approvals\n            {pendingCount > 0 && (\n              <Badge variant=\"default\" className=\"ml-auto text-xs bg-amber-500\">\n                {pendingCount}\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"messages\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800 relative\"\n            onClick={() => setActiveSection(\"messages\")}\n            data-testid=\"button-nav-messages\"\n          >\n            <MessageCircle className=\"mr-3 h-4 w-4\" />\n            Messages\n            <Badge variant=\"default\" className=\"ml-auto text-xs bg-blue-500\">\n              {conversations.length}\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"transactions\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => setActiveSection(\"transactions\")}\n            data-testid=\"button-nav-transactions\"\n          >\n            <ArrowLeftRight className=\"mr-3 h-4 w-4\" />\n            Transactions\n          </Button>\n          \n          <Button\n            variant={activeSection === \"security\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => setActiveSection(\"security\")}\n            data-testid=\"button-nav-security\"\n          >\n            <Shield className=\"mr-3 h-4 w-4\" />\n            Security\n          </Button>\n          \n          <Button\n            variant={activeSection === \"settings\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start text-white hover:bg-gray-800\"\n            onClick={() => setActiveSection(\"settings\")}\n            data-testid=\"button-nav-settings\"\n          >\n            <Settings className=\"mr-3 h-4 w-4\" />\n            Settings\n          </Button>\n        </nav>\n        \n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full text-red-400 hover:bg-red-900 border-red-400\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n      \n      {/* Admin Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Admin Top Bar */}\n        <header className=\"bg-white border-b border-border p-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-semibold\" data-testid=\"text-admin-dashboard-title\">\n                Admin Dashboard\n              </h1>\n              <p className=\"text-muted-foreground\">Secure Professional Bank Management</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"bg-red-600 text-white p-2 rounded-full\">\n                <ShieldCheck />\n              </div>\n              <span className=\"font-medium\" data-testid=\"text-admin-name\">SPB Admin</span>\n            </div>\n          </div>\n        </header>\n        \n        {/* Admin Dashboard Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {activeSection === \"dashboard\" && (\n            <div className=\"space-y-6\">\n              <div className=\"grid lg:grid-cols-4 gap-6\">\n                <Card data-testid=\"card-total-users\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Users</p>\n                        <p className=\"text-3xl font-bold\">{totalUsers}</p>\n                      </div>\n                      <Users className=\"text-blue-500 text-2xl\" />\n                    </div>\n                    <p className=\"text-sm text-green-600 mt-2\">↑ Active accounts</p>\n                  </CardContent>\n                </Card>\n                \n                <Card data-testid=\"card-pending-approvals\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Pending Approvals</p>\n                        <p className=\"text-3xl font-bold text-amber-600\">{pendingCount}</p>\n                      </div>\n                      <Clock className=\"text-amber-500 text-2xl\" />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">Requires attention</p>\n                  </CardContent>\n                </Card>\n                \n                <Card data-testid=\"card-active-accounts\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Active Accounts</p>\n                        <p className=\"text-3xl font-bold text-green-600\">{approvedUsers}</p>\n                      </div>\n                      <CheckCircle className=\"text-green-500 text-2xl\" />\n                    </div>\n                    <p className=\"text-sm text-green-600 mt-2\">\n                      {totalUsers > 0 ? ((approvedUsers / totalUsers) * 100).toFixed(1) : 0}% approval rate\n                    </p>\n                  </CardContent>\n                </Card>\n                \n                <Card data-testid=\"card-total-transactions\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Total Transactions</p>\n                        <p className=\"text-3xl font-bold\">$0</p>\n                      </div>\n                      <DollarSign className=\"text-green-500 text-2xl\" />\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-2\">System ready</p>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <div className=\"grid lg:grid-cols-2 gap-6\">\n                <Card data-testid=\"card-recent-activity\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Recent Activity</h3>\n                    <div className=\"space-y-3\">\n                      {pendingUsers.slice(0, 3).map((user: User) => (\n                        <div key={user.id} className=\"flex items-center space-x-3 p-3 border-l-4 border-blue-500 bg-blue-50\">\n                          <UserPlus className=\"text-blue-500\" />\n                          <div className=\"flex-1\">\n                            <p className=\"font-medium\">New user registration</p>\n                            <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </span>\n                        </div>\n                      ))}\n                      {pendingUsers.length === 0 && (\n                        <p className=\"text-muted-foreground text-center py-4\">No recent activity</p>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card data-testid=\"card-quick-actions\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <Button\n                        onClick={() => setActiveSection(\"approvals\")}\n                        className=\"p-4 h-auto flex flex-col items-center\"\n                        variant=\"outline\"\n                        data-testid=\"button-review-approvals\"\n                      >\n                        <CheckCircle className=\"text-green-500 text-2xl mb-2\" />\n                        <p className=\"font-medium\">Review Approvals</p>\n                        <p className=\"text-sm text-muted-foreground\">{pendingCount} pending</p>\n                      </Button>\n                      \n                      <Button\n                        onClick={() => setActiveSection(\"messages\")}\n                        className=\"p-4 h-auto flex flex-col items-center\"\n                        variant=\"outline\"\n                        data-testid=\"button-view-messages\"\n                      >\n                        <MessageCircle className=\"text-blue-500 text-2xl mb-2\" />\n                        <p className=\"font-medium\">View Messages</p>\n                        <p className=\"text-sm text-muted-foreground\">{conversations.length} conversations</p>\n                      </Button>\n                      \n                      <Button\n                        onClick={() => setActiveSection(\"users\")}\n                        className=\"p-4 h-auto flex flex-col items-center\"\n                        variant=\"outline\"\n                        data-testid=\"button-manage-users\"\n                      >\n                        <Users className=\"text-purple-500 text-2xl mb-2\" />\n                        <p className=\"font-medium\">Manage Users</p>\n                        <p className=\"text-sm text-muted-foreground\">{totalUsers} total</p>\n                      </Button>\n                      \n                      <Button\n                        onClick={() => setActiveSection(\"security\")}\n                        className=\"p-4 h-auto flex flex-col items-center\"\n                        variant=\"outline\"\n                        data-testid=\"button-security\"\n                      >\n                        <Shield className=\"text-red-500 text-2xl mb-2\" />\n                        <p className=\"font-medium\">Security</p>\n                        <p className=\"text-sm text-muted-foreground\">All secure</p>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {activeSection === \"users\" && (\n            <Card data-testid=\"card-user-management\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-semibold\">User Management</h3>\n                  <div className=\"flex space-x-2\">\n                    <Input placeholder=\"Search users...\" className=\"w-64\" />\n                  </div>\n                </div>\n                \n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left py-3 px-4\">User</th>\n                        <th className=\"text-left py-3 px-4\">Email</th>\n                        <th className=\"text-left py-3 px-4\">Status</th>\n                        <th className=\"text-left py-3 px-4\">Registration Date</th>\n                        <th className=\"text-left py-3 px-4\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {allUsers.map((user: User) => (\n                        <tr key={user.id} className=\"border-b border-border hover:bg-accent\">\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex items-center space-x-3\">\n                              <img\n                                src={`https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face`}\n                                alt=\"User avatar\"\n                                className=\"w-8 h-8 rounded-full\"\n                              />\n                              <div>\n                                <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                                <p className=\"text-sm text-muted-foreground\">ID: #{user.id.slice(-8)}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"py-3 px-4\">{user.email}</td>\n                          <td className=\"py-3 px-4\">\n                            <Badge \n                              variant={\n                                user.status === \"approved\" ? \"default\" : \n                                user.status === \"pending\" ? \"secondary\" :\n                                \"destructive\"\n                              }\n                            >\n                              {user.status}\n                            </Badge>\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            {new Date(user.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"py-3 px-4\">\n                            <div className=\"flex space-x-2\">\n                              {user.status === \"pending\" && (\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => handleApproveUser(user.id)}\n                                  disabled={approveUserMutation.isPending}\n                                  data-testid={`button-approve-${user.id}`}\n                                >\n                                  <Check className=\"h-3 w-3 mr-1\" />\n                                  Approve\n                                </Button>\n                              )}\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                data-testid={`button-view-${user.id}`}\n                              >\n                                <Eye className=\"h-3 w-3 mr-1\" />\n                                View\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {activeSection === \"approvals\" && (\n            <Card data-testid=\"card-pending-approvals-detail\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-6\">Pending Approvals</h3>\n                \n                <div className=\"space-y-6\">\n                  {pendingUsers.map((user: User) => (\n                    <div key={user.id} className=\"border border-border rounded-lg p-6\">\n                      <div className=\"# thoughts\n\nLooking at this request, I need to create a comprehensive online banking platform called \"Secure Professional Bank\" with both user and admin dashboards. The key requirements are:\n\n1. User registration with SSN and address fields\n2. Admin approval workflow for new accounts\n3. Real-time messaging between admin and users\n4. Role-based access control\n5. PostgreSQL database storage\n6. Professional banking UI design\n7. Responsive layout\n\nThe design reference shows a multi-page banking application with landing page, sign-up/sign-in forms, user dashboard with pending approval states, and admin dashboard with user management capabilities.\n\nI'll implement this using React with TypeScript, Express.js backend, PostgreSQL with Drizzle ORM, and WebSocket for real-time messaging. The application will have proper authentication, session management, and secure admin access.\n\n# useful_guidelines_from_blueprints\n\nFrom the database blueprint:\n- Add Drizzle models and relations to `shared/schema.ts`\n- Update `server/storage.ts` to replace MemStorage with DatabaseStorage\n- Use `npm run db:push` for schema changes\n\nFrom the WebSocket blueprint:\n- Add WebSocket server to existing HTTP server on distinct path `/ws`\n- Check `.readyState` against `WebSocket.OPEN`\n- Connect from client using correct protocol and path\n\n# directory_structure\n\n```json\n[\n    {\"path\": \"shared/schema.ts\", \"status\": \"overwritten\"},\n    {\"path\": \"server/db.ts\", \"status\": \"new\", \"blueprint_source\": \"javascript_database\"},\n    {\"path\": \"server/storage.ts\", \"status\": \"overwritten\"},\n    {\"path\": \"server/routes.ts\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/App.tsx\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/pages/landing.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/signup.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/signin.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/admin-login.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/user-dashboard.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/admin-dashboard.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/user-sidebar.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/admin-sidebar.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/message-chat.tsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/hooks/useAuth.ts\", \"status\": \"new\"},\n    {\"path\": \"client/src/hooks/useWebSocket.ts\", \"status\": \"new\"},\n    {\"path\": \"client/src/lib/authUtils.ts\", \"status\": \"new\"},\n    {\"path\": \"client/src/index.css\", \"status\": \"overwritten\"},\n    {\"path\": \"tailwind.config.ts\", \"status\": \"overwritten\"}\n]\n","size_bytes":24363},"client/src/pages/dashboard/user-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/lib/websocket\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  University,\n  TrendingUp,\n  Wallet,\n  ArrowLeftRight,\n  HandHeart,\n  MessageCircle,\n  Headphones,\n  LogOut,\n  Menu,\n  Clock,\n  Mail,\n  Phone,\n  RefreshCw,\n  Lock,\n  CheckCircle,\n  Send\n} from \"lucide-react\";\n\nexport default function UserDashboard() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const [activeSection, setActiveSection] = useState(\"overview\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [messageInput, setMessageInput] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { socket, sendMessage: sendWebSocketMessage } = useWebSocket();\n\n  // Get messages with admin\n  const { data: messages = [] } = useQuery({\n    queryKey: [\"/api/messages\", \"admin\"],\n    enabled: !!user,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      if (socket) {\n        sendWebSocketMessage({\n          type: 'send_message',\n          senderId: user?.id,\n          receiverId: 'admin',\n          content,\n          isFromAdmin: false\n        });\n      }\n      return content;\n    },\n    onSuccess: () => {\n      setMessageInput(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\", \"admin\"] });\n    }\n  });\n\n  const handleSendMessage = () => {\n    if (messageInput.trim()) {\n      sendMessageMutation.mutate(messageInput.trim());\n    }\n  };\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/\");\n  };\n\n  const refreshStatus = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    toast({\n      title: \"Status Refreshed\",\n      description: user?.status === \"pending\" ? \"Still pending approval.\" : \"Account status updated.\",\n    });\n  };\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  const isApproved = user.status === \"approved\";\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      {/* Sidebar */}\n      <aside \n        className={`bg-white border-r border-border w-64 transition-transform duration-300 ${\n          sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n        } md:translate-x-0 fixed md:relative z-30 h-full`}\n      >\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"bg-primary text-primary-foreground p-2 rounded\">\n              <University />\n            </div>\n            <div>\n              <h3 className=\"font-semibold\" data-testid=\"text-bank-name\">SPB Banking</h3>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-email\">\n                {user.email}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <nav className=\"p-4 space-y-2\">\n          <Button\n            variant={activeSection === \"overview\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start\"\n            onClick={() => setActiveSection(\"overview\")}\n            data-testid=\"button-nav-overview\"\n          >\n            <TrendingUp className=\"mr-3 h-4 w-4\" />\n            Overview\n          </Button>\n          \n          <Button\n            variant={activeSection === \"accounts\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start\"\n            onClick={() => setActiveSection(\"accounts\")}\n            data-testid=\"button-nav-accounts\"\n          >\n            <Wallet className=\"mr-3 h-4 w-4\" />\n            Accounts\n          </Button>\n          \n          <Button\n            variant={activeSection === \"transactions\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start relative\"\n            onClick={() => setActiveSection(\"transactions\")}\n            data-testid=\"button-nav-transactions\"\n          >\n            <ArrowLeftRight className=\"mr-3 h-4 w-4\" />\n            Transactions\n            {!isApproved && (\n              <Badge variant=\"outline\" className=\"ml-auto text-xs\">\n                Pending\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"loans\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start relative\"\n            onClick={() => setActiveSection(\"loans\")}\n            data-testid=\"button-nav-loans\"\n          >\n            <HandHeart className=\"mr-3 h-4 w-4\" />\n            Loans\n            {!isApproved && (\n              <Badge variant=\"outline\" className=\"ml-auto text-xs\">\n                Pending\n              </Badge>\n            )}\n          </Button>\n          \n          <Button\n            variant={activeSection === \"messages\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start relative\"\n            onClick={() => setActiveSection(\"messages\")}\n            data-testid=\"button-nav-messages\"\n          >\n            <MessageCircle className=\"mr-3 h-4 w-4\" />\n            Messages\n            <Badge variant=\"default\" className=\"ml-auto text-xs\">\n              {messages.length}\n            </Badge>\n          </Button>\n          \n          <Button\n            variant={activeSection === \"support\" ? \"secondary\" : \"ghost\"}\n            className=\"w-full justify-start\"\n            onClick={() => setActiveSection(\"support\")}\n            data-testid=\"button-nav-support\"\n          >\n            <Headphones className=\"mr-3 h-4 w-4\" />\n            Support\n          </Button>\n        </nav>\n        \n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full text-red-600 hover:bg-red-50 border-red-200\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n      \n      {/* Main Content */}\n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Top Bar */}\n        <header className=\"bg-white border-b border-border p-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              <Menu />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-semibold\" data-testid=\"text-dashboard-title\">\n                Dashboard\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-welcome\">\n                Welcome back, {user.firstName}!\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <Badge \n              variant={user.status === \"approved\" ? \"default\" : \"secondary\"}\n              data-testid=\"badge-account-status\"\n            >\n              <Clock className=\"mr-1 h-3 w-3\" />\n              {user.status === \"pending\" ? \"Pending Approval\" : user.status}\n            </Badge>\n            \n            <div className=\"flex items-center space-x-2\">\n              <img\n                src={`https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face`}\n                alt=\"Profile\"\n                className=\"w-8 h-8 rounded-full\"\n                data-testid=\"img-profile-avatar\"\n              />\n              <span className=\"font-medium\" data-testid=\"text-user-name\">\n                {user.firstName} {user.lastName}\n              </span>\n            </div>\n          </div>\n        </header>\n        \n        {/* Dashboard Content */}\n        <div className=\"flex-1 overflow-auto p-6\">\n          {activeSection === \"overview\" && (\n            <div className=\"space-y-6\">\n              <div className=\"grid lg:grid-cols-3 gap-6\">\n                <Card className=\"lg:col-span-2\" data-testid=\"card-account-status\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Account Status</h3>\n                    <div className=\"space-y-4\">\n                      {user.status === \"pending\" ? (\n                        <div className=\"flex items-center justify-between p-4 bg-amber-50 rounded-lg border border-amber-200\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"bg-amber-100 p-2 rounded-full\">\n                              <Clock className=\"text-amber-600 h-5 w-5\" />\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium\">Approval Pending</h4>\n                              <p className=\"text-sm text-muted-foreground\">Your account is under review</p>\n                            </div>\n                          </div>\n                          <Button\n                            onClick={() => setActiveSection(\"messages\")}\n                            data-testid=\"button-contact-admin\"\n                          >\n                            Contact Admin\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg border border-green-200\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"bg-green-100 p-2 rounded-full\">\n                              <CheckCircle className=\"text-green-600 h-5 w-5\" />\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium\">Account Approved</h4>\n                              <p className=\"text-sm text-muted-foreground\">All features are now available</p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"space-y-2\">\n                        <h5 className=\"font-medium\">Progress Status</h5>\n                        <div className=\"space-y-1 text-sm text-muted-foreground\">\n                          <div className=\"flex items-center\">\n                            <CheckCircle className=\"text-green-500 mr-2 h-4 w-4\" />\n                            Application submitted\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Clock className=\"text-amber-500 mr-2 h-4 w-4\" />\n                            Document verification {user.status === \"approved\" ? \"completed\" : \"in progress\"}\n                          </div>\n                          <div className=\"flex items-center\">\n                            {user.status === \"approved\" ? (\n                              <CheckCircle className=\"text-green-500 mr-2 h-4 w-4\" />\n                            ) : (\n                              <div className=\"text-gray-300 mr-2 h-4 w-4 rounded-full border-2\" />\n                            )}\n                            Account approval {user.status === \"approved\" ? \"completed\" : \"pending\"}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card data-testid=\"card-quick-actions\">\n                  <CardContent className=\"p-6\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n                    <div className=\"space-y-3\">\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start p-3\"\n                        onClick={() => setActiveSection(\"messages\")}\n                        data-testid=\"button-check-messages\"\n                      >\n                        <Mail className=\"mr-3 text-primary\" />\n                        <div className=\"text-left\">\n                          <div className=\"font-medium\">Check Messages</div>\n                          <div className=\"text-sm text-muted-foreground\">{messages.length} messages</div>\n                        </div>\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start p-3\"\n                        onClick={() => setActiveSection(\"support\")}\n                        data-testid=\"button-get-support\"\n                      >\n                        <Headphones className=\"mr-3 text-green-500\" />\n                        <div className=\"text-left\">\n                          <div className=\"font-medium\">Get Support</div>\n                          <div className=\"text-sm text-muted-foreground\">24/7 available</div>\n                        </div>\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start p-3\"\n                        onClick={refreshStatus}\n                        data-testid=\"button-refresh-status\"\n                      >\n                        <RefreshCw className=\"mr-3 text-blue-500\" />\n                        <div className=\"text-left\">\n                          <div className=\"font-medium\">Refresh Status</div>\n                          <div className=\"text-sm text-muted-foreground\">Check approval status</div>\n                        </div>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {activeSection === \"accounts\" && (\n            <Card data-testid=\"card-accounts\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Your Accounts</h3>\n                {!isApproved ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"bg-amber-100 p-4 rounded-full w-fit mx-auto mb-4\">\n                      <Lock className=\"text-amber-600 text-2xl h-8 w-8\" />\n                    </div>\n                    <h4 className=\"text-xl font-medium mb-2\">Account Access Pending</h4>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Your account information will be available once approved by our admin team.\n                    </p>\n                    <Button onClick={() => setActiveSection(\"messages\")}>\n                      Contact Support\n                    </Button>\n                  </div>\n                ) : (\n                  <div>Account details would be shown here for approved users.</div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {activeSection === \"transactions\" && (\n            <Card data-testid=\"card-transactions\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Transaction History</h3>\n                {!isApproved ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"bg-amber-100 p-4 rounded-full w-fit mx-auto mb-4\">\n                      <Lock className=\"text-amber-600 text-2xl h-8 w-8\" />\n                    </div>\n                    <h4 className=\"text-xl font-medium mb-2\">Transactions Locked</h4>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Transaction features will be enabled once your account is approved.\n                    </p>\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 max-w-md mx-auto\">\n                      <p className=\"text-amber-800 text-sm\">Once approved, you'll be able to:</p>\n                      <ul className=\"text-amber-700 text-sm mt-2 space-y-1\">\n                        <li>• Send and receive money</li>\n                        <li>• View transaction history</li>\n                        <li>• Set up recurring payments</li>\n                        <li>• Transfer between accounts</li>\n                      </ul>\n                    </div>\n                  </div>\n                ) : (\n                  <div>Transaction history would be shown here for approved users.</div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {activeSection === \"loans\" && (\n            <Card data-testid=\"card-loans\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Loan Services</h3>\n                {!isApproved ? (\n                  <div className=\"text-center py-12\">\n                    <div className=\"bg-amber-100 p-4 rounded-full w-fit mx-auto mb-4\">\n                      <Lock className=\"text-amber-600 text-2xl h-8 w-8\" />\n                    </div>\n                    <h4 className=\"text-xl font-medium mb-2\">Loan Services Locked</h4>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Loan application features will be available once your account is approved.\n                    </p>\n                    <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-4 max-w-md mx-auto\">\n                      <p className=\"text-amber-800 text-sm\">Available loan types after approval:</p>\n                      <ul className=\"text-amber-700 text-sm mt-2 space-y-1\">\n                        <li>• Personal loans</li>\n                        <li>• Auto loans</li>\n                        <li>• Home mortgages</li>\n                        <li>• Business loans</li>\n                      </ul>\n                    </div>\n                  </div>\n                ) : (\n                  <div>Loan services would be shown here for approved users.</div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {activeSection === \"messages\" && (\n            <Card className=\"h-96 flex flex-col\" data-testid=\"card-messages\">\n              <CardContent className=\"p-6 flex flex-col h-full\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold\">Messages</h3>\n                  <span className=\"text-sm text-muted-foreground\">Admin Support</span>\n                </div>\n                \n                <div className=\"flex-1 overflow-y-auto space-y-4 mb-4\">\n                  {messages.map((message: any, index: number) => (\n                    <div\n                      key={index}\n                      className={`flex items-start space-x-3 ${\n                        message.isFromAdmin ? \"\" : \"justify-end\"\n                      }`}\n                    >\n                      {message.isFromAdmin && (\n                        <div className=\"bg-red-600 text-white p-2 rounded-full w-8 h-8 flex items-center justify-center text-xs\">\n                          <University className=\"h-3 w-3\" />\n                        </div>\n                      )}\n                      <div className={`max-w-sm p-3 rounded-lg ${\n                        message.isFromAdmin \n                          ? \"bg-muted\" \n                          : \"bg-primary text-primary-foreground ml-auto\"\n                      }`}>\n                        <p className=\"text-sm\">{message.content}</p>\n                        <span className=\"text-xs opacity-70 mt-1 block\">\n                          {new Date(message.createdAt).toLocaleTimeString()}\n                        </span>\n                      </div>\n                      {!message.isFromAdmin && (\n                        <img\n                          src={`https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=32&h=32&fit=crop&crop=face`}\n                          alt=\"User\"\n                          className=\"w-6 h-6 rounded-full\"\n                        />\n                      )}\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Input\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    placeholder=\"Type your message...\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                    data-testid=\"input-message\"\n                  />\n                  <Button\n                    onClick={handleSendMessage}\n                    disabled={sendMessageMutation.isPending || !messageInput.trim()}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {activeSection === \"support\" && (\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-contact-support\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Contact Support</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg\">\n                      <Mail className=\"text-primary\" />\n                      <div>\n                        <div className=\"font-medium\">Email Support</div>\n                        <div className=\"text-sm text-muted-foreground\">support@spbank.com</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg\">\n                      <Phone className=\"text-green-500\" />\n                      <div>\n                        <div className=\"font-medium\">Phone Support</div>\n                        <div className=\"text-sm text-muted-foreground\">+1 (800) SPB-HELP</div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3 p-3 border border-border rounded-lg\">\n                      <Clock className=\"text-blue-500\" />\n                      <div>\n                        <div className=\"font-medium\">Business Hours</div>\n                        <div className=\"text-sm text-muted-foreground\">24/7 Available</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card data-testid=\"card-faq\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">FAQ</h3>\n                  <div className=\"space-y-3\">\n                    <details className=\"border border-border rounded p-3\">\n                      <summary className=\"font-medium cursor-pointer\">How long does account approval take?</summary>\n                      <p className=\"text-muted-foreground text-sm mt-2\">\n                        Account approval typically takes 24-48 hours after document verification.\n                      </p>\n                    </details>\n                    <details className=\"border border-border rounded p-3\">\n                      <summary className=\"font-medium cursor-pointer\">What documents are required?</summary>\n                      <p className=\"text-muted-foreground text-sm mt-2\">\n                        Valid ID, SSN verification, and proof of address are required for account opening.\n                      </p>\n                    </details>\n                    <details className=\"border border-border rounded p-3\">\n                      <summary className=\"font-medium cursor-pointer\">Can I access my account while pending?</summary>\n                      <p className=\"text-muted-foreground text-sm mt-2\">\n                        Yes, you can access basic features like messaging and account status. Full banking features are enabled after approval.\n                      </p>\n                    </details>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </main>\n      \n      {/* Mobile sidebar overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":24788}},"version":1}